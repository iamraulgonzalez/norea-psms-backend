/*
SQLyog Enterprise - MySQL GUI v8.18 
MySQL - 5.5.5-10.4.32-MariaDB : Database - norea_psms
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`norea_psms` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */;

USE `norea_psms`;

/*Table structure for table `classroom_subject_monthly_score` */

DROP TABLE IF EXISTS `classroom_subject_monthly_score`;

CREATE TABLE `classroom_subject_monthly_score` (
  `classroom_subject_monthly_score_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `class_id` int(10) unsigned NOT NULL,
  `assign_subject_grade_id` int(10) unsigned NOT NULL,
  `monthly_id` int(10) unsigned NOT NULL,
  `create_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`classroom_subject_monthly_score_id`),
  KEY `class_id` (`class_id`),
  KEY `assign_subject_grade_id` (`assign_subject_grade_id`),
  KEY `monthly_id` (`monthly_id`),
  CONSTRAINT `fk_classroom_subject_monthly_class` FOREIGN KEY (`class_id`) REFERENCES `tbl_classroom` (`class_id`) ON DELETE CASCADE,
  CONSTRAINT `fk_classroom_subject_monthly_monthly` FOREIGN KEY (`monthly_id`) REFERENCES `tbl_monthly` (`monthly_id`) ON DELETE CASCADE,
  CONSTRAINT `fk_classroom_subject_monthly_subject` FOREIGN KEY (`assign_subject_grade_id`) REFERENCES `tbl_assign_subject_grade` (`assign_subject_grade_id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=185 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `classroom_subject_monthly_score` */

insert  into `classroom_subject_monthly_score`(`classroom_subject_monthly_score_id`,`class_id`,`assign_subject_grade_id`,`monthly_id`,`create_date`,`isDeleted`) values (118,14,164,1,'2025-05-01 09:50:35',0),(119,14,166,1,'2025-05-01 09:50:35',0),(120,14,174,1,'2025-05-01 09:50:35',0),(121,14,181,1,'2025-05-01 09:50:35',0),(122,14,187,1,'2025-05-01 09:50:35',0),(123,14,175,1,'2025-05-01 09:50:35',0),(124,14,182,1,'2025-05-01 09:50:35',0),(125,14,177,1,'2025-05-01 09:50:35',0),(126,14,186,1,'2025-05-01 09:50:35',0),(127,14,183,1,'2025-05-01 09:50:35',0),(128,14,178,1,'2025-05-01 09:50:35',0),(129,14,165,1,'2025-05-01 09:50:35',0),(130,14,170,1,'2025-05-01 09:50:35',0),(131,14,185,1,'2025-05-01 09:50:35',0),(132,14,176,1,'2025-05-01 09:50:35',0),(133,14,180,1,'2025-05-01 09:50:35',0),(134,14,164,2,'2025-05-01 10:22:28',0),(135,11,157,1,'2025-05-01 13:25:46',0),(136,11,152,1,'2025-05-01 13:25:46',0),(137,11,160,1,'2025-05-01 13:25:46',0),(138,11,156,1,'2025-05-01 13:25:46',0),(139,11,149,1,'2025-05-01 13:25:46',0),(140,11,161,1,'2025-05-01 13:25:46',0),(141,11,155,1,'2025-05-01 13:25:46',0),(142,11,138,1,'2025-05-01 13:25:46',0),(143,11,151,1,'2025-05-01 13:25:46',0),(144,11,139,1,'2025-05-01 13:25:46',0),(145,11,144,1,'2025-05-01 13:25:46',0),(146,11,159,1,'2025-05-01 13:25:46',0),(147,11,150,1,'2025-05-01 13:25:46',0),(148,11,154,1,'2025-05-01 13:25:46',0),(149,11,140,1,'2025-05-01 13:25:46',0),(150,11,148,1,'2025-05-01 13:25:46',0),(151,11,146,1,'2025-05-01 13:25:46',0),(152,11,145,1,'2025-05-01 13:25:46',0),(153,11,147,1,'2025-05-01 13:25:46',0),(154,10,192,1,'2025-05-01 13:30:34',0),(155,10,207,1,'2025-05-01 13:30:34',0),(156,10,201,1,'2025-05-01 13:30:34',0),(157,10,208,1,'2025-05-01 13:30:34',0),(158,10,203,1,'2025-05-01 13:30:34',0),(159,10,209,1,'2025-05-01 13:30:34',1),(160,10,204,1,'2025-05-01 13:30:34',0),(161,10,191,1,'2025-05-01 13:30:34',0),(162,10,196,1,'2025-05-01 13:30:34',0),(163,10,202,1,'2025-05-01 13:30:34',0),(164,10,206,1,'2025-05-01 13:30:34',0),(165,10,190,1,'2025-05-01 13:30:34',0),(166,10,200,1,'2025-05-01 13:30:34',0),(167,10,198,1,'2025-05-01 13:30:34',1),(168,10,197,1,'2025-05-01 13:30:34',0),(169,10,199,1,'2025-05-01 13:30:34',0),(170,10,193,1,'2025-05-01 13:30:34',0),(171,10,205,1,'2025-05-01 13:30:34',0),(172,10,194,1,'2025-05-01 13:30:34',1),(173,10,195,1,'2025-05-01 13:30:34',0),(174,14,164,3,'2025-05-01 14:45:26',0),(175,14,175,3,'2025-05-01 14:45:26',0),(176,10,207,2,'2025-05-01 18:28:08',0),(177,10,201,2,'2025-05-01 18:28:09',0),(178,10,192,7,'2025-05-01 18:35:07',0),(179,10,201,7,'2025-05-01 18:35:07',0),(180,10,203,7,'2025-05-01 18:35:07',0),(181,15,164,1,'2025-05-01 20:41:41',0),(182,15,175,1,'2025-05-01 20:41:41',0),(183,15,175,2,'2025-05-01 20:42:00',0),(184,15,164,2,'2025-05-01 20:42:00',0);

/*Table structure for table `tbl_activity_log` */

DROP TABLE IF EXISTS `tbl_activity_log`;

CREATE TABLE `tbl_activity_log` (
  `activity_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `type` varchar(50) NOT NULL COMMENT 'Type of activity (login, score_entry, etc.)',
  `description` text NOT NULL COMMENT 'Description of the activity',
  `user_id` int(10) unsigned NOT NULL COMMENT 'User who performed the activity',
  `category` varchar(50) NOT NULL COMMENT 'Category of activity (auth, student, class, etc.)',
  `details` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT 'Additional details in JSON format' CHECK (json_valid(`details`)),
  `created_at` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`activity_id`),
  KEY `idx_user_id` (`user_id`),
  KEY `idx_type` (`type`),
  KEY `idx_category` (`category`),
  KEY `idx_created_at` (`created_at`),
  CONSTRAINT `fk_activity_user` FOREIGN KEY (`user_id`) REFERENCES `tbl_user` (`user_id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_activity_log` */

insert  into `tbl_activity_log`(`activity_id`,`type`,`description`,`user_id`,`category`,`details`,`created_at`,`isDeleted`) values (1,'login','User logged in successfully',1,'authentication','{\"ip\": \"127.0.0.1\", \"browser\": \"Chrome\"}','2025-04-17 20:57:20',0),(2,'student_register','New student registered',1,'student_management','{\"student_id\": 1001, \"student_name\": \"សុខ សុវណ្ណា\"}','2025-04-17 20:57:20',0),(3,'score_entry','Monthly scores entered',1,'score_management','{\"class_id\": 1, \"monthly_id\": 1, \"subject_count\": 3}','2025-04-17 20:57:20',0),(4,'class_create','New class created',1,'class_management','{\"class_id\": 1, \"class_name\": \"១ក\", \"grade_id\": 1}','2025-04-17 20:57:20',0),(5,'report_generate','Monthly report generated',1,'report_management','{\"report_type\": \"monthly\", \"class_id\": 1, \"monthly_id\": 1}','2025-04-17 20:57:20',0);

/*Table structure for table `tbl_assign_subject_grade` */

DROP TABLE IF EXISTS `tbl_assign_subject_grade`;

CREATE TABLE `tbl_assign_subject_grade` (
  `assign_subject_grade_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `grade_id` int(11) NOT NULL,
  `subject_code` int(10) unsigned NOT NULL,
  `create_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`assign_subject_grade_id`),
  KEY `fk_assign_subject_grade_grade` (`grade_id`),
  KEY `fk_assign_subject_grade_subject` (`subject_code`),
  CONSTRAINT `fk_assign_subject_grade_grade` FOREIGN KEY (`grade_id`) REFERENCES `tbl_grade` (`grade_id`),
  CONSTRAINT `fk_assign_subject_grade_subject` FOREIGN KEY (`subject_code`) REFERENCES `tbl_subject` (`subject_code`)
) ENGINE=InnoDB AUTO_INCREMENT=210 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_assign_subject_grade` */

insert  into `tbl_assign_subject_grade`(`assign_subject_grade_id`,`grade_id`,`subject_code`,`create_date`,`isDeleted`) values (138,2,1,'2025-04-30 01:01:25',0),(139,2,2,'2025-04-30 01:01:25',0),(140,2,3,'2025-04-30 01:01:25',0),(141,2,4,'2025-04-30 01:01:25',0),(142,2,5,'2025-04-30 01:01:25',0),(143,2,6,'2025-04-30 01:01:25',0),(144,2,7,'2025-04-30 01:01:25',0),(145,2,8,'2025-04-30 01:01:25',0),(146,2,9,'2025-04-30 01:01:25',0),(147,2,10,'2025-04-30 01:01:25',0),(148,2,11,'2025-04-30 01:01:25',0),(149,2,12,'2025-04-30 01:01:25',0),(150,2,13,'2025-04-30 01:01:25',0),(151,2,15,'2025-04-30 01:01:25',0),(152,2,14,'2025-04-30 01:01:25',0),(153,2,16,'2025-04-30 01:01:25',0),(154,2,17,'2025-04-30 01:01:25',0),(155,2,18,'2025-04-30 01:01:25',0),(156,2,19,'2025-04-30 01:01:25',0),(157,2,20,'2025-04-30 01:01:25',0),(158,2,21,'2025-04-30 01:01:25',0),(159,2,22,'2025-04-30 01:01:25',0),(160,2,23,'2025-04-30 01:01:25',0),(161,2,24,'2025-04-30 01:01:25',0),(162,2,25,'2025-04-30 01:01:25',0),(163,2,26,'2025-04-30 01:01:25',0),(164,4,1,'2025-05-01 09:49:58',0),(165,4,2,'2025-05-01 09:49:58',0),(166,4,3,'2025-05-01 09:49:58',0),(167,4,4,'2025-05-01 09:49:58',0),(168,4,5,'2025-05-01 09:49:58',0),(169,4,6,'2025-05-01 09:49:58',0),(170,4,7,'2025-05-01 09:49:58',0),(171,4,8,'2025-05-01 09:49:58',0),(172,4,9,'2025-05-01 09:49:58',0),(173,4,10,'2025-05-01 09:49:58',0),(174,4,11,'2025-05-01 09:49:58',0),(175,4,12,'2025-05-01 09:49:58',0),(176,4,13,'2025-05-01 09:49:58',0),(177,4,14,'2025-05-01 09:49:58',0),(178,4,15,'2025-05-01 09:49:58',0),(179,4,16,'2025-05-01 09:49:58',0),(180,4,17,'2025-05-01 09:49:58',0),(181,4,18,'2025-05-01 09:49:58',0),(182,4,19,'2025-05-01 09:49:58',0),(183,4,20,'2025-05-01 09:49:58',0),(184,4,21,'2025-05-01 09:49:58',0),(185,4,22,'2025-05-01 09:49:58',0),(186,4,23,'2025-05-01 09:49:58',0),(187,4,24,'2025-05-01 09:49:58',0),(188,4,25,'2025-05-01 09:49:58',0),(189,4,26,'2025-05-01 09:49:58',0),(190,1,3,'2025-05-01 13:30:05',0),(191,1,2,'2025-05-01 13:30:05',0),(192,1,1,'2025-05-01 13:30:05',0),(193,1,4,'2025-05-01 13:30:05',0),(194,1,5,'2025-05-01 13:30:05',0),(195,1,6,'2025-05-01 13:30:05',0),(196,1,7,'2025-05-01 13:30:05',0),(197,1,8,'2025-05-01 13:30:05',0),(198,1,9,'2025-05-01 13:30:05',0),(199,1,10,'2025-05-01 13:30:05',0),(200,1,11,'2025-05-01 13:30:05',0),(201,1,12,'2025-05-01 13:30:05',0),(202,1,13,'2025-05-01 13:30:05',0),(203,1,14,'2025-05-01 13:30:05',0),(204,1,15,'2025-05-01 13:30:05',0),(205,1,16,'2025-05-01 13:30:05',0),(206,1,17,'2025-05-01 13:30:05',0),(207,1,18,'2025-05-01 13:30:05',0),(208,1,19,'2025-05-01 13:30:05',0),(209,1,20,'2025-05-01 13:30:05',0);

/*Table structure for table `tbl_classroom` */

DROP TABLE IF EXISTS `tbl_classroom`;

CREATE TABLE `tbl_classroom` (
  `class_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `class_name` varchar(255) NOT NULL,
  `grade_id` int(11) NOT NULL,
  `session_id` int(11) DEFAULT NULL,
  `teacher_id` int(10) unsigned DEFAULT NULL,
  `create_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  `year_study_id` int(10) unsigned DEFAULT NULL,
  `status` varchar(255) DEFAULT 'active',
  `num_students_in_class` int(11) NOT NULL DEFAULT 45 COMMENT 'Maximum number of students allowed in this class',
  PRIMARY KEY (`class_id`,`class_name`),
  KEY `fk_classroom_session` (`session_id`),
  KEY `fk_classroom_year_study` (`year_study_id`),
  KEY `fk_classroom_grade` (`grade_id`),
  KEY `fk_classroom_teacher` (`teacher_id`),
  CONSTRAINT `fk_classroom_grade` FOREIGN KEY (`grade_id`) REFERENCES `tbl_grade` (`grade_id`),
  CONSTRAINT `fk_classroom_session` FOREIGN KEY (`session_id`) REFERENCES `tbl_school_session` (`session_id`) ON DELETE CASCADE,
  CONSTRAINT `fk_classroom_teacher` FOREIGN KEY (`teacher_id`) REFERENCES `tbl_user` (`user_id`),
  CONSTRAINT `fk_classroom_year_study` FOREIGN KEY (`year_study_id`) REFERENCES `tbl_year_study` (`year_study_id`) ON DELETE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_classroom` */

insert  into `tbl_classroom`(`class_id`,`class_name`,`grade_id`,`session_id`,`teacher_id`,`create_date`,`isDeleted`,`year_study_id`,`status`,`num_students_in_class`) values (10,'១ក',1,1,6,'2025-04-05 17:18:45',0,1,'active',45),(11,'២ក',2,1,NULL,'2025-04-05 17:24:22',0,1,'active',45),(12,'១ខ',1,1,3,'2025-04-12 08:26:25',0,1,'active',9),(13,'១គ',1,1,5,'2025-04-19 08:42:27',0,1,'active',9),(14,'៤ក',4,1,4,'2025-05-01 09:47:46',0,1,'active',45),(15,'៤ខ',4,1,7,'2025-05-01 20:41:12',0,1,'active',9);

/*Table structure for table `tbl_grade` */

DROP TABLE IF EXISTS `tbl_grade`;

CREATE TABLE `tbl_grade` (
  `grade_id` int(11) NOT NULL,
  `grade_name` varchar(255) NOT NULL,
  `level` int(50) DEFAULT NULL,
  `create_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`grade_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_grade` */

insert  into `tbl_grade`(`grade_id`,`grade_name`,`level`,`create_date`,`isDeleted`) values (1,'ថ្នាក់ទី ១',1,'2025-02-02 09:52:57',0),(2,'ថ្នាក់ទី ២',2,'2025-02-02 09:52:57',0),(3,'ថ្នាក់ទី ៣',3,'2025-02-02 09:52:57',0),(4,'ថ្នាក់ទី ៤',4,'2025-02-02 09:52:57',0),(5,'ថ្នាក់ទី ៥',5,'2025-02-02 09:52:57',0),(6,'ថ្នាក់ទី ៦',6,'2025-02-02 09:52:57',0);

/*Table structure for table `tbl_monthly` */

DROP TABLE IF EXISTS `tbl_monthly`;

CREATE TABLE `tbl_monthly` (
  `monthly_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `month_name` varchar(255) NOT NULL,
  `create_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`monthly_id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_monthly` */

insert  into `tbl_monthly`(`monthly_id`,`month_name`,`create_date`,`isDeleted`) values (1,'មករា','2025-02-02 09:52:34',0),(2,'កុម្ភះ','2025-02-02 09:52:34',0),(3,'មិនា','2025-02-02 09:52:34',0),(4,'មេសា','2025-02-02 09:52:34',0),(5,'ឧសភា','2025-02-02 09:52:34',0),(6,'មិថុនា','2025-02-02 09:52:34',0),(7,'កក្កដា','2025-02-02 09:52:34',0),(8,'សីហា','2025-02-02 09:52:34',0),(9,'កញ្ញា','2025-02-02 09:52:34',0),(10,'តុលា','2025-02-02 09:52:34',0),(11,'វិច្ឆិកា','2025-02-02 09:52:34',0),(12,'ធ្នូ','2025-02-02 09:52:34',0);

/*Table structure for table `tbl_school_session` */

DROP TABLE IF EXISTS `tbl_school_session`;

CREATE TABLE `tbl_school_session` (
  `session_id` int(11) NOT NULL AUTO_INCREMENT,
  `session_name` varchar(50) NOT NULL,
  `isDeleted` int(2) DEFAULT 0,
  `create_date` timestamp NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`session_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_school_session` */

insert  into `tbl_school_session`(`session_id`,`session_name`,`isDeleted`,`create_date`) values (1,'វេនព្រឹក',0,'2025-02-08 16:29:07'),(2,'វេនរសៀល',0,'2025-02-08 16:29:13');

/*Table structure for table `tbl_semester` */

DROP TABLE IF EXISTS `tbl_semester`;

CREATE TABLE `tbl_semester` (
  `semester_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `semester_name` varchar(255) NOT NULL,
  `create_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`semester_id`),
  UNIQUE KEY `semester_name` (`semester_name`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_semester` */

insert  into `tbl_semester`(`semester_id`,`semester_name`,`create_date`,`isDeleted`) values (1,'ឆមាសទី១','2025-02-02 09:51:24',0),(2,'ឆមាសទី២','2025-02-02 09:51:24',0);

/*Table structure for table `tbl_semester_exam_subjects` */

DROP TABLE IF EXISTS `tbl_semester_exam_subjects`;

CREATE TABLE `tbl_semester_exam_subjects` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `class_id` int(10) unsigned NOT NULL,
  `semester_id` int(10) unsigned NOT NULL,
  `assign_subject_grade_id` int(10) unsigned NOT NULL,
  `monthly_ids` varchar(255) DEFAULT NULL,
  `create_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`id`),
  KEY `class_id` (`class_id`),
  KEY `semester_id` (`semester_id`),
  KEY `assign_subject_grade_id` (`assign_subject_grade_id`),
  CONSTRAINT `tbl_semester_exam_subjects_ibfk_1` FOREIGN KEY (`class_id`) REFERENCES `tbl_classroom` (`class_id`),
  CONSTRAINT `tbl_semester_exam_subjects_ibfk_2` FOREIGN KEY (`semester_id`) REFERENCES `tbl_semester` (`semester_id`),
  CONSTRAINT `tbl_semester_exam_subjects_ibfk_3` FOREIGN KEY (`assign_subject_grade_id`) REFERENCES `tbl_assign_subject_grade` (`assign_subject_grade_id`)
) ENGINE=InnoDB AUTO_INCREMENT=87 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_semester_exam_subjects` */

insert  into `tbl_semester_exam_subjects`(`id`,`class_id`,`semester_id`,`assign_subject_grade_id`,`monthly_ids`,`create_date`,`isDeleted`) values (71,14,1,164,'1,2','2025-05-01 09:58:59',0),(72,14,1,182,'1,2','2025-05-01 09:58:59',0),(73,14,1,177,'1,2','2025-05-01 09:58:59',0),(74,14,2,181,'3','2025-05-01 14:45:56',0),(75,14,2,175,'3','2025-05-01 14:45:56',0),(76,10,1,192,'1','2025-05-01 18:28:25',0),(77,10,1,207,'1','2025-05-01 18:28:25',0),(78,10,2,207,'2','2025-05-01 18:29:03',0),(79,10,2,201,'2','2025-05-01 18:29:03',0),(80,10,2,208,'2','2025-05-01 18:29:03',0),(81,15,1,164,'1','2025-05-01 20:42:17',0),(82,15,1,182,'1','2025-05-01 20:42:17',0),(83,15,1,177,'1','2025-05-01 20:42:17',0),(84,15,2,164,'2','2025-05-01 20:42:35',0),(85,15,2,182,'2','2025-05-01 20:42:35',0),(86,15,2,177,'2','2025-05-01 20:42:35',0);

/*Table structure for table `tbl_student_info` */

DROP TABLE IF EXISTS `tbl_student_info`;

CREATE TABLE `tbl_student_info` (
  `student_id` int(10) unsigned NOT NULL,
  `student_name` varchar(255) NOT NULL,
  `gender` varchar(255) NOT NULL,
  `dob` date NOT NULL,
  `pob_address` varchar(255) DEFAULT NULL,
  `current_address` varchar(255) DEFAULT NULL,
  `father_name` varchar(255) DEFAULT NULL,
  `father_job` varchar(255) DEFAULT NULL,
  `father_phone` varchar(255) DEFAULT NULL,
  `mother_name` varchar(255) DEFAULT NULL,
  `mother_job` varchar(255) DEFAULT NULL,
  `mother_phone` varchar(255) DEFAULT NULL,
  `family_status` varchar(255) DEFAULT NULL,
  `status` varchar(255) DEFAULT NULL,
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`student_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_student_info` */

insert  into `tbl_student_info`(`student_id`,`student_name`,`gender`,`dob`,`pob_address`,`current_address`,`father_name`,`father_job`,`father_phone`,`mother_name`,`mother_job`,`mother_phone`,`family_status`,`status`,`isDeleted`) values (1001,'សុខ វិសាល','male','2016-05-15','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','សុខ សុភា','កសិករ','០៩៧៨៨៨៧៧៧','យិន សុគន្ធា','មេផ្ទះ','០៩៧៨៨៨៧៧៦','level1','active',0),(1002,'ម៉ៅ សុគន្ធា','female','2016-06-20','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','ម៉ៅ វិបុល','អ្នកលក់ដូរ','០៩៧៨៨៨៧៧៨','សែម សុជាតា','អ្នកលក់ដូរ','០៩៧៨៨៨៧៧៩','level2','active',0),(1003,'គង់ រតនា','male','2016-07-10','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','គង់ សំណាង','គ្រូបង្រៀន','០៩៧៨៨៨៧៨០','ស៊ុន សុភាព','គ្រូបង្រៀន','០៩៧៨៨៨៧៨១','level1','active',0),(1004,'លី សុវណ្ណារិទ្ធ','female','2016-07-15','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','លី សុវណ្ណ','អ្នកជំនួញ','០៩៧៨៨៨៧៨២','ជា សុខា','អ្នកជំនួញ','០៩៧៨៨៨៧៨៣','level2','active',0),(1005,'ហេង វិរៈ','male','2016-08-01','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','ហេង វិចិត្រ','កសិករ','០៩៧៨៨៨៧៨៤','គង់ សុខនី','កសិករ','០៩៧៨៨៨៧៨៥','level1','active',0),(1006,'ណុប សុភ័ក្រ','female','2016-08-15','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','ណុប វាសនា','គ្រូបង្រៀន','០៩៧៨៨៨៧៨៦','លឹម សុខា','គ្រូបង្រៀន','០៩៧៨៨៨៧៨៧','level2','active',0),(1007,'ឡុង វិសិដ្ឋ','male','2016-09-01','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','ឡុង សំអាត','អ្នកជំនួញ','០៩៧៨៨៨៧៨៨','សុខ សុភា','អ្នកជំនួញ','០៩៧៨៨៨៧៨៩','level1','active',0),(1008,'គឹម សុវណ្ណារ៉ា','female','2016-09-15','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','គឹម វិសាល','កសិករ','០៩៧៨៨៨៧៩០','ម៉ម សុគន្ធា','កសិករ','០៩៧៨៨៨៧៩១','level2','active',0),(1009,'ជា វិរៈបុត្រ','male','2016-10-01','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','ជា សំណាង','គ្រូបង្រៀន','០៩៧៨៨៨៧៩២','លី សុជាតា','គ្រូបង្រៀន','០៩៧៨៨៨៧៩៣','level1','active',0),(1010,'ស៊ាន សុវណ្ណារិទ្ធ','female','2016-10-15','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','ស៊ាន វិបុល','អ្នកជំនួញ','០៩៧៨៨៨៧៩៤','ហុង សុខា','អ្នកជំនួញ','០៩៧៨៨៨៧៩៥','level2','active',0),(1011,'ហុង វិរៈធី','male','2016-11-01','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','ហុង សំណាង','កសិករ','០៩៧៨៨៨៧៩៦','គឹម សុភា','កសិករ','០៩៧៨៨៨៧៩៧','level1','active',0),(1012,'គឹម សុគន្ធា','female','2016-11-15','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','គឹម វិបុល','អ្នកជំនួញ','០៩៧៨៨៨៧៩៨','ហេង សុជាតា','អ្នកជំនួញ','០៩៧៨៨៨៧៩៩','level2','active',0),(1013,'ឡុង វិរៈបុត្រ','male','2016-12-01','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','ឡុង សំណាង','គ្រូបង្រៀន','០៩៧៨៨៨៨០០','ស៊ាន សុភាព','គ្រូបង្រៀន','០៩៧៨៨៨៨០១','level1','active',0),(1014,'ស៊ុន សុវណ្ណារិទ្ធ','female','2016-12-15','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','ស៊ុន វិបុល','កសិករ','០៩៧៨៨៨៨០២','ឡុង សុខា','កសិករ','០៩៧៨៨៨៨០៣','level2','active',0),(1015,'គង់ វិរៈធី','male','2017-01-01','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','គង់ សំណាង','អ្នកជំនួញ','០៩៧៨៨៨៨០៤','គឹម សុគន្ធា','អ្នកជំនួញ','០៩៧៨៨៨៨០៥','level1','active',0),(1016,'ហេង សុគន្ធា','female','2017-01-15','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','ហេង វិបុល','គ្រូបង្រៀន','០៩៧៨៨៨៨០៦','ឡុង សុជាតា','គ្រូបង្រៀន','០៩៧៨៨៨៨០៧','level2','active',0),(1017,'ណុប វិរៈបុត្រ','male','2017-02-01','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','ណុប សំណាង','កសិករ','០៩៧៨៨៨៨០៨','ស៊ុន សុភា','កសិករ','០៩៧៨៨៨៨០៩','level1','active',0),(1018,'លឹម សុវណ្ណារិទ្ធ','female','2017-02-15','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','លឹម វិបុល','អ្នកជំនួញ','០៩៧៨៨៨៨១០','គង់ សុខា','អ្នកជំនួញ','០៩៧៨៨៨៨១១','level2','active',0),(1019,'សុខ វិរៈធី','male','2017-03-01','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','សុខ សំណាង','គ្រូបង្រៀន','០៩៧៨៨៨៨១២','ហេង សុភាព','គ្រូបង្រៀន','០៩៧៨៨៨៨១៣','level1','active',0),(1020,'ម៉ៅ សុគន្ធា','female','2017-03-15','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','ម៉ៅ វិបុល','កសិករ','០៩៧៨៨៨៨១៤','ណុប សុខា','កសិករ','០៩៧៨៨៨៨១៥','level2','active',0),(1021,'ជា រតនា','male','2017-04-01','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','ជា សុវណ្ណ','អ្នកលក់ដូរ','០៩៧៨៨៨៨១៦','លឹម សុគន្ធា','អ្នកលក់ដូរ','០៩៧៨៨៨៨១៧','level1','active',0),(1022,'យិន សុវណ្ណារិទ្ធ','female','2017-04-15','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','យិន វិបុល','គ្រូបង្រៀន','០៩៧៨៨៨៨១៨','សុខ សុជាតា','គ្រូបង្រៀន','០៩៧៨៨៨៨១៩','level2','active',0),(1023,'សែម វិរៈធី','male','2017-05-01','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','សែម សំណាង','កសិករ','០៩៧៨៨៨៨២០','ម៉ៅ សុភាព','កសិករ','០៩៧៨៨៨៨២១','level1','active',0),(1024,'ស៊ុន សុគន្ធា','female','2017-05-15','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','ស៊ុន វិចិត្រ','អ្នកជំនួញ','០៩៧៨៨៨៨២២','ស៊ាន សុខា','អ្នកជំនួញ','០៩៧៨៨៨៨២៣','level2','active',0),(1025,'ជា វិសិដ្ឋ','male','2017-06-01','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','ជា វាសនា','គ្រូបង្រៀន','០៩៧៨៨៨៨២៤','គង់ សុភា','គ្រូបង្រៀន','០៩៧៨៨៨៨២៥','level1','active',0),(1026,'លី សុភ័ក្រ','female','2017-06-15','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','លី សំអាត','កសិករ','០៩៧៨៨៨៨២៦','ណុប សុជាតា','កសិករ','០៩៧៨៨៨៨២៧','level2','active',0),(1027,'គង់ សុភ័ក្រ','male','2017-07-01','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','គង់ វិសាល','អ្នកជំនួញ','០៩៧៨៨៨៨២៨','លឹម សុភា','អ្នកជំនួញ','០៩៧៨៨៨៨២៩','level1','active',0),(1028,'ហេង សុវណ្ណារ៉ា','female','2017-07-15','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','ហេង សំណាង','គ្រូបង្រៀន','០៩៧៨៨៨៨៣០','ជា សុគន្ធា','គ្រូបង្រៀន','០៩៧៨៨៨៨៣១','level2','active',0),(1029,'គឹម វិរៈបុត្រ','male','2017-08-01','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','គឹម សំណាង','កសិករ','០៩៧៨៨៨៨៣២','យិន សុភាព','កសិករ','០៩៧៨៨៨៨៣៣','level1','active',0),(1030,'ណុប សុវណ្ណារិទ្ធ','female','2017-08-15','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','ណុប វិបុល','អ្នកជំនួញ','០៩៧៨៨៨៨៣៤','សែម សុខា','អ្នកជំនួញ','០៩៧៨៨៨៨៣៥','level2','active',0),(1031,'ឡុង រតនា','male','2017-09-01','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','ឡុង សុវណ្ណ','គ្រូបង្រៀន','០៩៧៨៨៨៨៣៦','ស៊ុន សុគន្ធា','គ្រូបង្រៀន','០៩៧៨៨៨៨៣៧','level1','active',0),(1032,'គឹម សុភ័ក្រ','female','2017-09-15','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','គឹម វិចិត្រ','កសិករ','០៩៧៨៨៨៨៣៨','ជា សុជាតា','កសិករ','០៩៧៨៨៨៨៣៩','level2','active',0),(1033,'សុខ វិសិដ្ឋ','male','2017-10-01','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','សុខ វាសនា','អ្នកជំនួញ','០៩៧៨៨៨៨៤០','លី សុភា','អ្នកជំនួញ','០៩៧៨៨៨៨៤១','level1','active',0),(1034,'ម៉ៅ សុវណ្ណារ៉ា','female','2017-10-15','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','ម៉ៅ សំអាត','គ្រូបង្រៀន','០៩៧៨៨៨៨៤២','គង់ សុជាតា','គ្រូបង្រៀន','០៩៧៨៨៨៨៤៣','level2','active',0),(1035,'ស៊ាន វិរៈធី','male','2017-11-01','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','ស៊ាន វិសាល','កសិករ','០៩៧៨៨៨៨៤៤','ហេង សុភាព','កសិករ','០៩៧៨៨៨៨៤៥','level1','active',0),(1036,'ហុង សុគន្ធា','female','2017-11-15','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','ហុង សំណាង','អ្នកជំនួញ','០៩៧៨៨៨៨៤៦','គឹម សុខា','អ្នកជំនួញ','០៩៧៨៨៨៨៤៧','level2','active',0),(1037,'យិន វិរៈបុត្រ','male','2017-12-01','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','យិន សំណាង','គ្រូបង្រៀន','០៩៧៨៨៨៨៤៨','ឡុង សុគន្ធា','គ្រូបង្រៀន','០៩៧៨៨៨៨៤៩','level1','active',0),(1038,'សែម សុវណ្ណារិទ្ធ','female','2017-12-15','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','សែម វិបុល','កសិករ','០៩៧៨៨៨៨៥០','ណុប សុភា','កសិករ','០៩៧៨៨៨៨៥១','level2','active',0),(1039,'ស៊ុន សុភ័ក្រ','male','2018-01-01','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','ស៊ុន វិចិត្រ','អ្នកជំនួញ','០៩៧៨៨៨៨៥២','ស៊ុន សុជាតា','អ្នកជំនួញ','០៩៧៨៨៨៨៥៣','level1','active',0),(1040,'ស៊ាន សុភ័ក្រ','female','2018-01-15','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','ស៊ាន សំណាង','គ្រូបង្រៀន','០៩៧៨៨៨៨៥៤','ជា សុភាព','គ្រូបង្រៀន','០៩៧៨៨៨៨៥៥','level2','active',0),(1041,'ជា វិសាល','male','2018-02-01','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','ជា សំណាង','កសិករ','០៩៧៨៨៨៨៥៦','លី សុគន្ធា','កសិករ','០៩៧៨៨៨៨៥៧','level1','active',0),(1042,'លី សុវណ្ណារ៉ា','female','2018-02-15','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','លី វិបុល','អ្នកជំនួញ','០៩៧៨៨៨៨៥៨','គង់ សុជាតា','អ្នកជំនួញ','០៩៧៨៨៨៨៥៩','level2','active',0),(1043,'គង់ វិសាល','male','2018-03-01','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','គង់ វាសនា','គ្រូបង្រៀន','០៩៧៨៨៨៨៦០','ហេង សុភា','គ្រូបង្រៀន','០៩៧៨៨៨៨៦១','level1','active',0),(1044,'ហេង សុភ័ក្រ','female','2018-03-15','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','ហេង សំអាត','កសិករ','០៩៧៨៨៨៨៦២','គឹម សុខា','កសិករ','០៩៧៨៨៨៨៦៣','level2','active',0),(1045,'គឹម រតនា','male','2018-04-01','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','គឹម វិសាល','អ្នកជំនួញ','០៩៧៨៨៨៨៦៤','ណុប សុគន្ធា','អ្នកជំនួញ','០៩៧៨៨៨៨៦៥','level1','graduate',0),(1046,'ណុប សុវណ្ណារ៉ា','female','2018-04-15','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','ណុប សំណាង','គ្រូបង្រៀន','០៩៧៨៨៨៨៦៦','ឡុង សុជាតា','គ្រូបង្រៀន','០៩៧៨៨៨៨៦៧','level2','graduate',0),(1047,'ឡុង វិរៈធី','male','2018-05-01','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','ឡុង សុវណ្ណ','កសិករ','០៩៧៨៨៨៨៦៨','ស៊ុន សុភា','កសិករ','០៩៧៨៨៨៨៦៩','level1','graduate',0),(1048,'ស៊ុន សុវណ្ណារ៉ា','female','2018-05-15','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','ស៊ុន វិចិត្រ','អ្នកជំនួញ','០៩៧៨៨៨៨៧០','ស៊ាន សុខា','អ្នកជំនួញ','០៩៧៨៨៨៨៧១','level2','graduate',0),(1049,'ស៊ាន វិសិដ្ឋ','male','2018-06-01','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','ស៊ាន វាសនា','គ្រូបង្រៀន','០៩៧៨៨៨៨៧២','ជា សុភាព','គ្រូបង្រៀន','០៩៧៨៨៨៨៧៣','level1','suspend',0),(1050,'ហុង សុវណ្ណារិទ្ធ','female','2018-06-15','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','ហុង សំអាត','កសិករ','០៩៧៨៨៨៨៧៤','លី សុជាតា','កសិករ','០៩៧៨៨៨៨៧៥','level2','suspend',0),(1051,'យិន វិសាល','male','2018-07-01','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','យិន វិសាល','អ្នកជំនួញ','០៩៧៨៨៨៨៧៦','គង់ សុគន្ធា','អ្នកជំនួញ','០៩៧៨៨៨៨៧៧','level1','suspend',0),(1052,'សែម សុគន្ធា','female','2018-07-15','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','សែម សំណាង','គ្រូបង្រៀន','០៩៧៨៨៨៨៧៨','ហេង សុជាតា','គ្រូបង្រៀន','០៩៧៨៨៨៨៧៩','level2','suspend',0),(1053,'ម៉ៅ វិរៈបុត្រ','male','2018-08-01','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','ម៉ៅ វិចិត្រ','កសិករ','០៩៧៨៨៨៨៨០','គឹម សុភា','កសិករ','០៩៧៨៨៨៨៨១','level1','inactive',0),(1054,'សុខ សុភ័ក្រ','female','2018-08-15','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','សុខ វាសនា','អ្នកជំនួញ','០៩៧៨៨៨៨៨២','ណុប សុខា','អ្នកជំនួញ','០៩៧៨៨៨៨៨៣','level2','inactive',0),(1055,'ជា សុភ័ក្រ','male','2018-09-01','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','ជា សំអាត','គ្រូបង្រៀន','០៩៧៨៨៨៨៨៤','ឡុង សុគន្ធា','គ្រូបង្រៀន','០៩៧៨៨៨៨៨៥','level1','inactive',0),(1056,'លី សុវណ្ណារិទ្ធ','female','2018-09-15','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','លី វិសាល','កសិករ','០៩៧៨៨៨៨៨៦','ស៊ុន សុជាតា','កសិករ','០៩៧៨៨៨៨៨៧','level2','inactive',0),(1057,'គង់ វិសិដ្ឋ','male','2018-10-01','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','គង់ វាសនា','អ្នកជំនួញ','០៩៧៨៨៨៨៨៨','ស៊ាន សុភា','អ្នកជំនួញ','០៩៧៨៨៨៨៨៩','level1','active',0),(1058,'ហេង សុវណ្ណារិទ្ធ','female','2018-10-15','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','ហេង សំណាង','គ្រូបង្រៀន','០៩៧៨៨៨៨៩០','ជា សុជាតា','គ្រូបង្រៀន','០៩៧៨៨៨៨៩១','level2','active',0),(1059,'គឹម រតនា','male','2018-11-01','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','គឹម សំអាត','កសិករ','០៩៧៨៨៨៨៩២','លី សុភាព','កសិករ','០៩៧៨៨៨៨៩៣','level1','active',0),(1060,'ណុប សុគន្ធា','female','2018-11-15','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','ណុប វិបុល','អ្នកជំនួញ','០៩៧៨៨៨៨៩៤','គង់ សុខា','អ្នកជំនួញ','០៩៧៨៨៨៨៩៥','level2','active',0),(1061,'ឡុង វិសាល','male','2018-12-01','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','ភូមិរំចេក សង្កាត់រតនៈ ក្រុងបាត់ដំបង','ឡុង វាសនា','គ្រូបង្រៀន','០៩៧៨៨៨៨៩៦','ហេង សុគន្ធា','គ្រូបង្រៀន','០៩៧៨៨៨៨៩៧','level1','active',0),(1062,'ស៊ុន សុវណ្ណារ៉ា','female','2018-12-15','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','ភូមិស្វាយប៉ោ សង្កាត់ស្វាយប៉ោ ក្រុងបាត់ដំបង','ស៊ុន សំណាង','កសិករ','០៩៧៨៨៨៨៩៨','គឹម សុជាតា','កសិករ','០៩៧៨៨៨៨៩៩','level2','graduate',0),(1063,'ស៊ាន វិរៈបុត្រ','male','2019-01-01','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','ភូមិព្រែកព្រះស្តេច សង្កាត់ព្រែកព្រះស្តេច ក្រុងបាត់ដំបង','ស៊ាន វិចិត្រ','អ្នកជំនួញ','០៩៧៨៨៨៩០០','ណុប សុភា','អ្នកជំនួញ','០៩៧៨៨៨៩០១','level1','graduate',0),(1064,'ហុង សុភ័ក្រ','female','2019-01-15','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','ភូមិទួលតាឯក សង្កាត់ទួលតាឯក ក្រុងបាត់ដំបង','ហុង សំអាត','គ្រូបង្រៀន','០៩៧៨៨៨៩០២','ឡុង សុខា','គ្រូបង្រៀន','០៩៧៨៨៨៩០៣','level2','graduate',0),(1065,'យិន វិសិដ្ឋ','male','2019-02-01','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','ភូមិឧត្តម សង្កាត់ឧត្តម ក្រុងបាត់ដំបង','យិន វិសាល','កសិករ','០៩៧៨៨៨៩០៤','ស៊ុន សុគន្ធា','កសិករ','០៩៧៨៨៨៩០៥','level1','suspend',0),(1066,'សែម សុវណ្ណារិទ្ធ','female','2019-02-15','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','ភូមិចំការសំរោង សង្កាត់ចំការសំរោង ក្រុងបាត់ដំបង','សែម វិបុល','អ្នកជំនួញ','០៩៧៨៨៨៩០៦','ស៊ាន សុជាតា','អ្នកជំនួញ','០៩៧៨៨៨៩០៧','level2','suspend',0),(1067,'ម៉ៅ វិសាល','male','2019-03-01','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','ភូមិកំពង់ក្រឡាញ់ សង្កាត់កំពង់ក្រឡាញ់ ក្រុងបាត់ដំបង','ម៉ៅ វាសនា','គ្រូបង្រៀន','០៩៧៨៨៨៩០៨','ជា សុភាព','គ្រូបង្រៀន','០៩៧៨៨៨៩០៩','level1','suspend',0),(1068,'សុខ សុវណ្ណារ៉ា','female','2019-03-15','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','ភូមិស្លាកែត សង្កាត់ស្លាកែត ក្រុងបាត់ដំបង','សុខ សំណាង','កសិករ','០៩៧៨៨៨៩១០','លី សុជាតា','កសិករ','០៩៧៨៨៨៩១១','level2','inactive',0),(1069,'ជា វិរៈធី','male','2019-04-01','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','ភូមិវត្តគរ សង្កាត់វត្តគរ ក្រុងបាត់ដំបង','ជា សំអាត','អ្នកជំនួញ','០៩៧៨៨៨៩១២','គង់ សុគន្ធា','អ្នកជំនួញ','០៩៧៨៨៨៩១៣','level1','inactive',0),(1070,'លី សុគន្ធា','female','2019-04-15','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','ភូមិអូរចារ សង្កាត់អូរចារ ក្រុងបាត់ដំបង','លី វិចិត្រ','គ្រូបង្រៀន','០៩៧៨៨៨៩១៤','ហេង សុខា','គ្រូបង្រៀន','០៩៧៨៨៨៩១៥','level2','inactive',0),(1071,'តេស្ត','male','2025-05-01',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'level1','active',0);

/*Table structure for table `tbl_student_monthly_score` */

DROP TABLE IF EXISTS `tbl_student_monthly_score`;

CREATE TABLE `tbl_student_monthly_score` (
  `student_monthly_score_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `student_id` int(10) unsigned NOT NULL,
  `classroom_subject_monthly_score_id` int(10) unsigned NOT NULL,
  `score` float NOT NULL,
  `create_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`student_monthly_score_id`),
  KEY `student_id` (`student_id`),
  KEY `classroom_subject_monthly_score_id` (`classroom_subject_monthly_score_id`),
  CONSTRAINT `fk_monthly_score_student` FOREIGN KEY (`student_id`) REFERENCES `tbl_student_info` (`student_id`),
  CONSTRAINT `fk_student_monthly_classroom_subject` FOREIGN KEY (`classroom_subject_monthly_score_id`) REFERENCES `classroom_subject_monthly_score` (`classroom_subject_monthly_score_id`) ON DELETE CASCADE,
  CONSTRAINT `tbl_student_monthly_score_ibfk_1` FOREIGN KEY (`student_id`) REFERENCES `tbl_student_info` (`student_id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1949 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_student_monthly_score` */

insert  into `tbl_student_monthly_score`(`student_monthly_score_id`,`student_id`,`classroom_subject_monthly_score_id`,`score`,`create_date`,`isDeleted`) values (1337,1008,118,10,'2025-05-01 09:50:40',0),(1338,1008,119,9,'2025-05-01 09:50:41',0),(1339,1008,120,8,'2025-05-01 09:50:42',0),(1340,1008,121,6,'2025-05-01 09:50:42',0),(1341,1008,122,5,'2025-05-01 09:50:43',0),(1342,1008,123,4,'2025-05-01 09:50:43',0),(1343,1008,124,7,'2025-05-01 09:50:44',0),(1344,1008,125,8,'2025-05-01 09:50:44',0),(1345,1008,126,6,'2025-05-01 09:50:45',0),(1346,1008,127,5,'2025-05-01 09:50:45',0),(1347,1008,128,8,'2025-05-01 09:50:45',0),(1348,1008,129,9,'2025-05-01 09:50:46',0),(1349,1008,130,6,'2025-05-01 09:50:46',0),(1350,1008,131,9,'2025-05-01 09:50:47',0),(1351,1008,132,8,'2025-05-01 09:50:48',0),(1352,1008,133,7,'2025-05-01 09:50:48',0),(1353,1009,118,6,'2025-05-01 09:50:49',0),(1354,1009,119,8,'2025-05-01 09:50:50',0),(1355,1009,120,7,'2025-05-01 09:50:50',0),(1356,1009,121,5,'2025-05-01 09:50:51',0),(1357,1009,122,10,'2025-05-01 09:50:51',0),(1358,1009,123,9,'2025-05-01 09:50:52',0),(1359,1009,124,7,'2025-05-01 09:50:52',0),(1360,1009,125,7,'2025-05-01 09:50:53',0),(1361,1009,126,9,'2025-05-01 09:50:54',0),(1362,1009,127,7,'2025-05-01 09:50:54',0),(1363,1009,128,6,'2025-05-01 09:50:54',0),(1364,1009,129,10,'2025-05-01 09:50:55',0),(1365,1009,130,9,'2025-05-01 09:50:56',0),(1366,1009,131,10,'2025-05-01 09:50:56',0),(1367,1009,132,7,'2025-05-01 09:50:58',0),(1368,1009,133,6,'2025-05-01 09:50:58',0),(1369,1012,118,8,'2025-05-01 09:50:59',0),(1370,1012,119,9,'2025-05-01 09:51:00',0),(1371,1012,120,7,'2025-05-01 09:51:00',0),(1372,1012,121,6,'2025-05-01 09:51:01',0),(1373,1012,122,8,'2025-05-01 09:51:01',0),(1374,1012,123,9,'2025-05-01 09:51:02',0),(1375,1012,124,7,'2025-05-01 09:51:02',0),(1376,1012,125,6,'2025-05-01 09:51:02',0),(1377,1012,126,8,'2025-05-01 09:51:03',0),(1378,1012,127,7,'2025-05-01 09:51:03',0),(1379,1012,128,6,'2025-05-01 09:51:04',0),(1380,1012,129,8,'2025-05-01 09:51:04',0),(1381,1012,130,9,'2025-05-01 09:51:05',0),(1382,1012,131,7,'2025-05-01 09:51:05',0),(1383,1012,132,6,'2025-05-01 09:51:05',0),(1384,1012,133,9,'2025-05-01 09:51:07',0),(1385,1021,118,7,'2025-05-01 09:51:07',0),(1386,1021,119,8,'2025-05-01 09:51:07',0),(1387,1021,120,7,'2025-05-01 09:51:08',0),(1388,1021,121,8,'2025-05-01 09:51:09',0),(1389,1021,122,7,'2025-05-01 09:51:09',0),(1390,1021,123,6,'2025-05-01 09:51:10',0),(1391,1021,124,7,'2025-05-01 09:51:10',0),(1392,1021,125,7,'2025-05-01 09:51:11',0),(1393,1021,126,8,'2025-05-01 09:51:11',0),(1394,1021,127,10,'2025-05-01 09:51:12',0),(1395,1021,128,7,'2025-05-01 09:51:14',0),(1396,1021,129,8,'2025-05-01 09:51:14',0),(1397,1021,130,9,'2025-05-01 09:51:15',0),(1398,1021,131,7,'2025-05-01 09:51:17',0),(1399,1021,132,8,'2025-05-01 09:51:17',0),(1400,1021,133,8,'2025-05-01 09:51:18',0),(1401,1025,118,5,'2025-05-01 09:51:19',0),(1402,1025,119,7,'2025-05-01 09:51:20',0),(1403,1025,120,9,'2025-05-01 09:51:21',0),(1404,1025,121,8,'2025-05-01 09:51:21',0),(1405,1025,122,6,'2025-05-01 09:51:21',0),(1406,1025,123,8,'2025-05-01 09:51:22',0),(1407,1025,124,7,'2025-05-01 09:51:22',0),(1408,1025,125,9,'2025-05-01 09:51:23',0),(1409,1025,126,7,'2025-05-01 09:51:23',0),(1410,1025,127,8,'2025-05-01 09:51:24',0),(1411,1025,128,6,'2025-05-01 09:51:25',0),(1412,1025,129,8,'2025-05-01 09:51:25',0),(1413,1025,130,7,'2025-05-01 09:51:26',0),(1414,1025,131,9,'2025-05-01 09:51:26',0),(1415,1025,132,7,'2025-05-01 09:51:27',0),(1416,1025,133,8,'2025-05-01 09:51:27',0),(1417,1032,118,7,'2025-05-01 09:51:28',0),(1418,1032,119,7,'2025-05-01 09:51:29',0),(1419,1032,120,6,'2025-05-01 09:51:29',0),(1420,1032,121,8,'2025-05-01 09:51:30',0),(1421,1032,122,7,'2025-05-01 09:51:30',0),(1422,1032,123,9,'2025-05-01 09:51:31',0),(1423,1032,124,7,'2025-05-01 09:51:31',0),(1424,1032,125,8,'2025-05-01 09:51:32',0),(1425,1032,126,6,'2025-05-01 09:51:32',0),(1426,1032,127,7,'2025-05-01 09:51:33',0),(1427,1032,128,6,'2025-05-01 09:51:34',0),(1428,1032,129,7,'2025-05-01 09:51:34',0),(1429,1032,130,8,'2025-05-01 09:51:35',0),(1430,1032,131,7,'2025-05-01 09:51:35',0),(1431,1032,132,8,'2025-05-01 09:51:35',0),(1432,1032,133,8,'2025-05-01 09:51:37',0),(1433,1041,118,9,'2025-05-01 09:51:38',0),(1434,1041,119,7,'2025-05-01 09:51:39',0),(1435,1041,120,8,'2025-05-01 09:51:39',0),(1436,1041,121,6,'2025-05-01 09:51:39',0),(1437,1041,122,8,'2025-05-01 09:51:40',0),(1438,1041,123,7,'2025-05-01 09:51:41',0),(1439,1041,124,7,'2025-05-01 09:51:44',0),(1440,1041,125,8,'2025-05-01 09:51:44',0),(1441,1041,126,8,'2025-05-01 09:51:47',0),(1442,1041,127,7,'2025-05-01 09:51:47',0),(1443,1041,128,9,'2025-05-01 09:51:48',0),(1444,1041,129,6,'2025-05-01 09:51:49',0),(1445,1041,130,7,'2025-05-01 09:51:50',0),(1446,1041,131,7,'2025-05-01 09:51:52',0),(1447,1041,132,7,'2025-05-01 09:51:53',0),(1448,1041,133,8,'2025-05-01 09:51:54',0),(1449,1008,134,9,'2025-05-01 10:22:33',0),(1450,1009,134,9,'2025-05-01 10:22:34',0),(1451,1029,118,7,'2025-05-01 11:51:02',0),(1452,1002,118,7,'2025-05-01 12:16:10',0),(1453,1002,119,8,'2025-05-01 12:16:11',0),(1454,1002,120,9,'2025-05-01 12:16:12',0),(1455,1002,121,7,'2025-05-01 12:16:12',0),(1456,1002,122,8,'2025-05-01 12:16:13',0),(1457,1002,123,6,'2025-05-01 12:16:14',0),(1458,1002,124,5,'2025-05-01 12:16:14',0),(1459,1002,125,7,'2025-05-01 12:16:14',0),(1460,1002,126,8,'2025-05-01 12:16:15',0),(1461,1002,127,7,'2025-05-01 12:16:16',0),(1462,1002,128,8,'2025-05-01 12:16:16',0),(1463,1002,129,8,'2025-05-01 12:16:17',0),(1464,1002,130,6,'2025-05-01 12:16:18',0),(1465,1002,131,9,'2025-05-01 12:16:19',0),(1466,1002,132,7,'2025-05-01 12:16:20',0),(1467,1002,133,8,'2025-05-01 12:16:20',0),(1468,1004,118,8,'2025-05-01 12:16:22',0),(1469,1004,119,7,'2025-05-01 12:16:22',0),(1470,1004,120,9,'2025-05-01 12:16:23',0),(1471,1004,121,8,'2025-05-01 12:16:24',0),(1472,1004,122,6,'2025-05-01 12:16:24',0),(1473,1004,123,5,'2025-05-01 12:16:25',0),(1474,1004,124,7,'2025-05-01 12:16:26',0),(1475,1004,125,8,'2025-05-01 12:16:26',0),(1476,1004,126,7,'2025-05-01 12:16:27',0),(1477,1004,127,6,'2025-05-01 12:16:27',0),(1478,1004,128,8,'2025-05-01 12:16:28',0),(1479,1004,129,7,'2025-05-01 12:16:29',0),(1480,1004,130,9,'2025-05-01 12:16:29',0),(1481,1004,131,7,'2025-05-01 12:16:30',0),(1482,1004,132,9,'2025-05-01 12:16:31',0),(1483,1004,133,6,'2025-05-01 12:16:31',0),(1484,1006,118,6,'2025-05-01 12:16:33',0),(1485,1006,119,7,'2025-05-01 12:16:34',0),(1486,1006,120,9,'2025-05-01 12:16:35',0),(1487,1006,121,8,'2025-05-01 12:16:35',0),(1488,1006,122,6,'2025-05-01 12:16:36',0),(1489,1006,123,7,'2025-05-01 12:16:36',0),(1490,1006,124,8,'2025-05-01 12:16:37',0),(1491,1006,125,8,'2025-05-01 12:16:38',0),(1492,1006,126,6,'2025-05-01 12:16:38',0),(1493,1006,127,7,'2025-05-01 12:16:39',0),(1494,1006,128,8,'2025-05-01 12:16:40',0),(1495,1006,129,7,'2025-05-01 12:16:40',0),(1496,1006,130,8,'2025-05-01 12:16:41',0),(1497,1006,131,7,'2025-05-01 12:16:41',0),(1498,1006,132,8,'2025-05-01 12:16:42',0),(1499,1006,133,7,'2025-05-01 12:16:43',0),(1500,1017,118,7,'2025-05-01 12:16:51',0),(1501,1017,119,8,'2025-05-01 12:16:51',0),(1502,1017,120,6,'2025-05-01 12:16:52',0),(1503,1017,121,9,'2025-05-01 12:16:52',0),(1504,1017,122,7,'2025-05-01 12:16:53',0),(1505,1017,123,8,'2025-05-01 12:16:53',0),(1506,1017,124,6,'2025-05-01 12:16:54',0),(1507,1017,125,9,'2025-05-01 12:16:54',0),(1508,1017,126,6,'2025-05-01 12:16:55',0),(1509,1017,127,8,'2025-05-01 12:16:56',0),(1510,1017,128,7,'2025-05-01 12:16:56',0),(1511,1017,129,9,'2025-05-01 12:16:57',0),(1512,1017,130,5,'2025-05-01 12:16:57',0),(1513,1017,131,8,'2025-05-01 12:16:59',0),(1514,1017,132,7,'2025-05-01 12:17:00',0),(1515,1017,133,6,'2025-05-01 12:17:00',0),(1516,1018,118,8,'2025-05-01 12:17:01',0),(1517,1018,119,6,'2025-05-01 12:17:01',0),(1518,1018,120,8,'2025-05-01 12:17:02',0),(1519,1018,121,7,'2025-05-01 12:17:03',0),(1520,1018,122,8,'2025-05-01 12:17:04',0),(1521,1018,123,7,'2025-05-01 12:17:04',0),(1522,1018,124,6,'2025-05-01 12:17:05',0),(1523,1018,125,8,'2025-05-01 12:17:05',0),(1524,1018,126,6,'2025-05-01 12:17:06',0),(1525,1018,127,8,'2025-05-01 12:17:06',0),(1526,1018,128,6,'2025-05-01 12:17:07',0),(1527,1018,129,8,'2025-05-01 12:17:07',0),(1528,1018,130,6,'2025-05-01 12:17:08',0),(1529,1018,131,8,'2025-05-01 12:17:09',0),(1530,1018,132,9,'2025-05-01 12:17:09',0),(1531,1018,133,6,'2025-05-01 12:17:10',0),(1532,1019,118,8,'2025-05-01 12:17:12',0),(1533,1019,119,7,'2025-05-01 12:17:13',0),(1534,1019,120,9,'2025-05-01 12:17:13',0),(1535,1019,121,7,'2025-05-01 12:17:14',0),(1536,1019,122,8,'2025-05-01 12:17:14',0),(1537,1019,123,6,'2025-05-01 12:17:14',0),(1538,1019,124,7,'2025-05-01 12:17:15',0),(1539,1019,125,5,'2025-05-01 12:17:15',0),(1540,1019,126,7,'2025-05-01 12:17:16',0),(1541,1019,127,8,'2025-05-01 12:17:17',0),(1542,1019,128,6,'2025-05-01 12:17:17',0),(1543,1019,129,7,'2025-05-01 12:17:18',0),(1544,1019,130,5,'2025-05-01 12:17:18',0),(1545,1019,131,8,'2025-05-01 12:17:18',0),(1546,1019,132,6,'2025-05-01 12:17:19',0),(1547,1019,133,8,'2025-05-01 12:17:20',0),(1548,1020,118,7,'2025-05-01 12:17:23',0),(1549,1020,119,6,'2025-05-01 12:17:24',0),(1550,1020,120,8,'2025-05-01 12:17:24',0),(1551,1020,121,7,'2025-05-01 12:17:24',0),(1552,1020,122,6,'2025-05-01 12:17:25',0),(1553,1020,123,8,'2025-05-01 12:17:25',0),(1554,1020,124,7,'2025-05-01 12:17:26',0),(1555,1020,125,9,'2025-05-01 12:17:26',0),(1556,1020,126,7,'2025-05-01 12:17:27',0),(1557,1020,127,6,'2025-05-01 12:17:27',0),(1558,1020,128,9,'2025-05-01 12:17:28',0),(1559,1020,129,8,'2025-05-01 12:17:29',0),(1560,1020,130,8,'2025-05-01 12:17:33',0),(1561,1020,131,7,'2025-05-01 12:17:33',0),(1562,1020,132,9,'2025-05-01 12:17:34',0),(1563,1020,133,5,'2025-05-01 12:17:34',0),(1564,1022,118,7,'2025-05-01 12:17:38',0),(1565,1022,119,8,'2025-05-01 12:17:39',0),(1566,1022,120,9,'2025-05-01 12:17:39',0),(1567,1022,121,6,'2025-05-01 12:17:40',0),(1568,1022,122,7,'2025-05-01 12:17:40',0),(1569,1022,123,6,'2025-05-01 12:17:41',0),(1570,1022,124,8,'2025-05-01 12:17:42',0),(1571,1022,125,9,'2025-05-01 12:17:42',0),(1572,1022,126,7,'2025-05-01 12:17:42',0),(1573,1022,127,8,'2025-05-01 12:17:43',0),(1574,1022,128,9,'2025-05-01 12:17:44',0),(1575,1022,129,7,'2025-05-01 12:17:44',0),(1576,1022,130,6,'2025-05-01 12:17:45',0),(1577,1022,131,8,'2025-05-01 12:17:46',0),(1578,1022,132,9,'2025-05-01 12:17:46',0),(1579,1022,133,7,'2025-05-01 12:17:47',0),(1580,1026,118,7,'2025-05-01 12:17:52',0),(1581,1026,119,8,'2025-05-01 12:17:52',0),(1582,1026,120,9,'2025-05-01 12:17:53',0),(1583,1026,121,7,'2025-05-01 12:17:54',0),(1584,1026,122,8,'2025-05-01 12:17:54',0),(1585,1026,123,5,'2025-05-01 12:17:55',0),(1586,1026,124,6,'2025-05-01 12:17:56',0),(1587,1026,125,7,'2025-05-01 12:17:57',0),(1588,1026,126,8,'2025-05-01 12:17:57',0),(1589,1026,127,6,'2025-05-01 12:17:58',0),(1590,1026,128,7,'2025-05-01 12:17:59',0),(1591,1026,129,8,'2025-05-01 12:18:00',0),(1592,1026,130,6,'2025-05-01 12:18:01',0),(1593,1026,131,8,'2025-05-01 12:18:01',0),(1594,1026,132,8,'2025-05-01 12:18:03',0),(1595,1026,133,9,'2025-05-01 12:18:03',0),(1596,1029,119,8,'2025-05-01 12:18:06',0),(1597,1029,120,7,'2025-05-01 12:18:06',0),(1598,1029,121,9,'2025-05-01 12:18:07',0),(1599,1029,122,7,'2025-05-01 12:18:08',0),(1600,1029,123,8,'2025-05-01 12:18:09',0),(1601,1029,124,7,'2025-05-01 12:18:10',0),(1602,1029,125,6,'2025-05-01 12:18:10',0),(1603,1029,126,8,'2025-05-01 12:18:12',0),(1604,1029,127,7,'2025-05-01 12:18:12',0),(1605,1029,128,8,'2025-05-01 12:18:13',0),(1606,1029,129,7,'2025-05-01 12:18:14',0),(1607,1029,130,8,'2025-05-01 12:18:17',0),(1608,1029,131,9,'2025-05-01 12:18:18',0),(1609,1029,132,8,'2025-05-01 12:18:19',0),(1610,1029,133,7,'2025-05-01 12:18:20',0),(1611,1030,118,8,'2025-05-01 12:18:23',0),(1612,1030,119,9,'2025-05-01 12:18:23',0),(1613,1030,120,7,'2025-05-01 12:18:24',0),(1614,1030,121,8,'2025-05-01 12:18:25',0),(1615,1030,122,6,'2025-05-01 12:18:25',0),(1616,1030,123,9,'2025-05-01 12:18:26',0),(1617,1030,124,8,'2025-05-01 12:18:26',0),(1618,1030,125,5,'2025-05-01 12:18:27',0),(1619,1030,126,6,'2025-05-01 12:18:27',0),(1620,1030,127,8,'2025-05-01 12:18:28',0),(1621,1030,128,9,'2025-05-01 12:18:28',0),(1622,1030,129,7,'2025-05-01 12:18:29',0),(1623,1030,130,6,'2025-05-01 12:18:30',0),(1624,1030,131,7,'2025-05-01 12:18:30',0),(1625,1030,132,6,'2025-05-01 12:18:31',0),(1626,1030,133,5,'2025-05-01 12:18:31',0),(1627,1033,118,8,'2025-05-01 12:18:41',0),(1628,1033,119,7,'2025-05-01 12:18:42',0),(1629,1033,120,9,'2025-05-01 12:18:43',0),(1630,1033,121,7,'2025-05-01 12:18:43',0),(1631,1033,122,8,'2025-05-01 12:18:43',0),(1632,1033,123,6,'2025-05-01 12:18:44',0),(1633,1033,124,9,'2025-05-01 12:18:45',0),(1634,1033,125,8,'2025-05-01 12:18:45',0),(1635,1033,126,7,'2025-05-01 12:18:46',0),(1636,1033,127,6,'2025-05-01 12:18:47',0),(1637,1033,128,9,'2025-05-01 12:18:48',0),(1638,1033,129,8,'2025-05-01 12:18:48',0),(1639,1033,130,7,'2025-05-01 12:18:49',0),(1640,1033,131,6,'2025-05-01 12:18:50',0),(1641,1033,132,7,'2025-05-01 12:18:50',0),(1642,1033,133,7,'2025-05-01 12:18:51',0),(1643,1034,118,8,'2025-05-01 12:18:52',0),(1644,1034,119,8,'2025-05-01 12:18:53',0),(1645,1034,120,9,'2025-05-01 12:18:55',0),(1646,1034,121,8,'2025-05-01 12:18:55',0),(1647,1034,122,7,'2025-05-01 12:18:56',0),(1648,1034,123,6,'2025-05-01 12:18:56',0),(1649,1034,124,8,'2025-05-01 12:18:58',0),(1650,1034,125,7,'2025-05-01 12:18:58',0),(1651,1034,126,6,'2025-05-01 12:18:59',0),(1652,1034,127,7,'2025-05-01 12:18:59',0),(1653,1034,128,8,'2025-05-01 12:19:00',0),(1654,1034,129,7,'2025-05-01 12:19:01',0),(1655,1034,130,8,'2025-05-01 12:19:02',0),(1656,1034,131,9,'2025-05-01 12:19:03',0),(1657,1034,132,7,'2025-05-01 12:19:03',0),(1658,1034,133,8,'2025-05-01 12:19:04',0),(1659,1037,118,9,'2025-05-01 12:19:05',0),(1660,1037,119,8,'2025-05-01 12:19:06',0),(1661,1037,120,7,'2025-05-01 12:19:06',0),(1662,1037,121,6,'2025-05-01 12:19:07',0),(1663,1037,122,8,'2025-05-01 12:19:07',0),(1664,1037,123,9,'2025-05-01 12:19:08',0),(1665,1037,124,8,'2025-05-01 12:19:09',0),(1666,1037,125,9,'2025-05-01 12:19:09',0),(1667,1037,126,8,'2025-05-01 12:19:09',0),(1668,1037,127,7,'2025-05-01 12:19:10',0),(1669,1037,128,6,'2025-05-01 12:19:11',0),(1670,1037,129,6,'2025-05-01 12:19:12',0),(1671,1037,130,8,'2025-05-01 12:19:13',0),(1672,1037,131,9,'2025-05-01 12:19:15',0),(1673,1037,132,8,'2025-05-01 12:19:16',0),(1674,1037,133,8,'2025-05-01 12:19:17',0),(1675,1042,118,7,'2025-05-01 12:19:24',0),(1676,1042,119,8,'2025-05-01 12:19:24',0),(1677,1042,120,6,'2025-05-01 12:19:25',0),(1678,1042,121,9,'2025-05-01 12:19:26',0),(1679,1042,122,8,'2025-05-01 12:19:26',0),(1680,1042,123,6,'2025-05-01 12:19:26',0),(1681,1042,124,7,'2025-05-01 12:19:27',0),(1682,1042,125,5,'2025-05-01 12:19:28',0),(1683,1042,126,7,'2025-05-01 12:19:28',0),(1684,1042,127,8,'2025-05-01 12:19:29',0),(1685,1042,128,7,'2025-05-01 12:19:29',0),(1686,1042,129,6,'2025-05-01 12:19:30',0),(1687,1042,130,5,'2025-05-01 12:19:30',0),(1688,1042,131,8,'2025-05-01 12:19:32',0),(1689,1042,132,7,'2025-05-01 12:19:32',0),(1690,1042,133,8,'2025-05-01 12:19:33',0),(1691,1060,118,7,'2025-05-01 12:19:34',0),(1692,1060,119,8,'2025-05-01 12:19:34',0),(1693,1060,120,7,'2025-05-01 12:19:36',0),(1694,1060,121,8,'2025-05-01 12:19:36',0),(1695,1060,122,7,'2025-05-01 12:19:36',0),(1696,1060,123,6,'2025-05-01 12:19:37',0),(1697,1060,124,7,'2025-05-01 12:19:37',0),(1698,1060,125,8,'2025-05-01 12:19:37',0),(1699,1060,126,6,'2025-05-01 12:19:39',0),(1700,1060,127,7,'2025-05-01 12:19:39',0),(1701,1060,128,8,'2025-05-01 12:19:39',0),(1702,1060,129,7,'2025-05-01 12:19:39',0),(1703,1060,130,6,'2025-05-01 12:19:39',0),(1704,1060,131,8,'2025-05-01 12:19:40',0),(1705,1060,132,9,'2025-05-01 12:19:41',0),(1706,1060,133,7,'2025-05-01 12:19:41',0),(1707,1010,118,8,'2025-05-01 12:21:44',0),(1708,1010,119,9,'2025-05-01 12:21:44',0),(1709,1010,120,7,'2025-05-01 12:21:45',0),(1710,1010,121,8,'2025-05-01 12:21:46',0),(1711,1010,122,9,'2025-05-01 12:21:47',0),(1712,1010,123,8,'2025-05-01 12:21:47',0),(1713,1010,124,8,'2025-05-01 12:21:48',0),(1714,1010,125,9,'2025-05-01 12:21:49',0),(1715,1010,126,7,'2025-05-01 12:21:49',0),(1716,1010,127,8,'2025-05-01 12:21:50',0),(1717,1010,128,7,'2025-05-01 12:21:51',0),(1718,1010,129,8,'2025-05-01 12:21:52',0),(1719,1010,130,7,'2025-05-01 12:21:53',0),(1720,1010,131,8,'2025-05-01 12:21:53',0),(1721,1010,132,9,'2025-05-01 12:21:55',0),(1722,1010,133,8,'2025-05-01 12:21:55',0),(1723,1023,118,8,'2025-05-01 12:22:01',0),(1724,1023,119,9,'2025-05-01 12:22:01',0),(1725,1023,120,8,'2025-05-01 12:22:01',0),(1726,1023,121,9,'2025-05-01 12:22:03',0),(1727,1023,122,7,'2025-05-01 12:22:03',0),(1728,1023,123,6,'2025-05-01 12:22:03',0),(1729,1023,124,5,'2025-05-01 12:22:04',0),(1730,1023,125,7,'2025-05-01 12:22:04',0),(1731,1023,126,8,'2025-05-01 12:22:04',0),(1732,1023,127,9,'2025-05-01 12:22:05',0),(1733,1023,128,8,'2025-05-01 12:22:05',0),(1734,1023,129,7,'2025-05-01 12:22:09',0),(1735,1023,130,8,'2025-05-01 12:22:10',0),(1736,1023,131,9,'2025-05-01 12:22:10',0),(1737,1023,132,7,'2025-05-01 12:22:11',0),(1738,1023,133,6,'2025-05-01 12:22:11',0),(1739,1035,118,8,'2025-05-01 12:22:25',0),(1740,1035,119,9,'2025-05-01 12:22:25',0),(1741,1035,120,8,'2025-05-01 12:22:27',0),(1742,1035,121,9,'2025-05-01 12:22:27',0),(1743,1035,122,7,'2025-05-01 12:22:28',0),(1744,1035,123,8,'2025-05-01 12:22:28',0),(1745,1035,124,6,'2025-05-01 12:22:29',0),(1746,1035,125,7,'2025-05-01 12:22:29',0),(1747,1035,126,8,'2025-05-01 12:22:30',0),(1748,1035,127,9,'2025-05-01 12:22:31',0),(1749,1035,128,8,'2025-05-01 12:22:31',0),(1750,1035,129,9,'2025-05-01 12:22:32',0),(1751,1035,130,8,'2025-05-01 12:22:33',0),(1752,1035,131,7,'2025-05-01 12:22:33',0),(1753,1035,132,6,'2025-05-01 12:22:34',0),(1754,1035,133,8,'2025-05-01 12:22:34',0),(1755,1038,118,8,'2025-05-01 12:22:38',0),(1756,1038,119,9,'2025-05-01 12:22:39',0),(1757,1038,120,7,'2025-05-01 12:22:39',0),(1758,1038,121,6,'2025-05-01 12:22:40',0),(1759,1038,122,9,'2025-05-01 12:22:40',0),(1760,1038,123,8,'2025-05-01 12:22:41',0),(1761,1038,124,7,'2025-05-01 12:22:41',0),(1762,1038,125,9,'2025-05-01 12:22:42',0),(1763,1038,126,8,'2025-05-01 12:22:43',0),(1764,1038,127,7,'2025-05-01 12:22:43',0),(1765,1038,128,9,'2025-05-01 12:22:45',0),(1766,1038,129,8,'2025-05-01 12:22:45',0),(1767,1038,130,8,'2025-05-01 12:22:47',0),(1768,1038,131,9,'2025-05-01 12:22:48',0),(1769,1038,132,8,'2025-05-01 12:22:50',0),(1770,1038,133,6,'2025-05-01 12:22:51',0),(1771,1040,118,8,'2025-05-01 12:22:54',0),(1772,1040,119,8,'2025-05-01 12:22:55',0),(1773,1040,120,9,'2025-05-01 12:22:55',0),(1774,1040,121,6,'2025-05-01 12:22:56',0),(1775,1040,122,7,'2025-05-01 12:22:56',0),(1776,1040,123,5,'2025-05-01 12:22:57',0),(1777,1040,124,7,'2025-05-01 12:22:58',0),(1778,1040,125,8,'2025-05-01 12:22:58',0),(1779,1040,126,7,'2025-05-01 12:22:59',0),(1780,1040,127,8,'2025-05-01 12:22:59',0),(1781,1040,128,9,'2025-05-01 12:22:59',0),(1782,1040,129,6,'2025-05-01 12:23:01',0),(1783,1040,130,7,'2025-05-01 12:23:01',0),(1784,1040,131,8,'2025-05-01 12:23:01',0),(1785,1040,132,8,'2025-05-01 12:23:02',0),(1786,1040,133,5,'2025-05-01 12:23:03',0),(1787,1005,118,8,'2025-05-01 12:55:02',0),(1788,1005,119,9,'2025-05-01 12:55:02',0),(1789,1005,120,5,'2025-05-01 12:55:03',0),(1790,1005,121,4,'2025-05-01 12:55:03',0),(1791,1005,122,6,'2025-05-01 12:55:07',0),(1792,1005,127,8,'2025-05-01 12:55:07',0),(1793,1005,123,5,'2025-05-01 12:55:07',0),(1794,1005,128,7,'2025-05-01 12:55:07',0),(1795,1005,129,6,'2025-05-01 12:55:07',0),(1796,1005,124,7,'2025-05-01 12:55:07',0),(1797,1005,125,6,'2025-05-01 12:55:07',0),(1798,1005,130,5,'2025-05-01 12:55:07',0),(1799,1005,126,5,'2025-05-01 12:55:07',0),(1800,1005,131,8,'2025-05-01 12:55:08',0),(1801,1005,132,9,'2025-05-01 12:55:09',0),(1802,1005,133,7,'2025-05-01 12:55:10',0),(1803,1003,135,8,'2025-05-01 13:25:52',0),(1804,1003,136,7,'2025-05-01 13:25:52',0),(1805,1003,137,8,'2025-05-01 13:25:52',0),(1806,1003,138,7,'2025-05-01 13:25:53',0),(1807,1003,139,8,'2025-05-01 13:25:53',0),(1808,1003,140,7,'2025-05-01 13:25:53',0),(1809,1003,141,8,'2025-05-01 13:25:53',0),(1810,1003,142,7,'2025-05-01 13:25:54',0),(1811,1003,143,8,'2025-05-01 13:25:54',0),(1812,1003,144,7,'2025-05-01 13:25:54',0),(1813,1003,145,8,'2025-05-01 13:25:54',0),(1814,1003,146,7,'2025-05-01 13:25:55',0),(1815,1003,147,6,'2025-05-01 13:25:55',0),(1816,1003,148,7,'2025-05-01 13:25:55',0),(1817,1003,149,8,'2025-05-01 13:25:55',0),(1818,1003,150,5,'2025-05-01 13:25:56',0),(1819,1003,151,6,'2025-05-01 13:25:56',0),(1820,1003,152,7,'2025-05-01 13:25:56',0),(1821,1003,153,8,'2025-05-01 13:25:57',0),(1822,1015,135,9,'2025-05-01 13:25:58',0),(1823,1015,136,8,'2025-05-01 13:25:58',0),(1824,1015,137,6,'2025-05-01 13:25:58',0),(1825,1015,138,5,'2025-05-01 13:25:59',0),(1826,1015,139,6,'2025-05-01 13:25:59',0),(1827,1015,140,4,'2025-05-01 13:25:59',0),(1828,1015,141,5,'2025-05-01 13:25:59',0),(1829,1015,142,6,'2025-05-01 13:26:00',0),(1830,1015,143,7,'2025-05-01 13:26:00',0),(1831,1015,144,6,'2025-05-01 13:26:00',0),(1832,1015,145,5,'2025-05-01 13:26:01',0),(1833,1015,146,4,'2025-05-01 13:26:01',0),(1834,1015,147,6,'2025-05-01 13:26:01',0),(1835,1015,148,7,'2025-05-01 13:26:01',0),(1836,1015,149,6,'2025-05-01 13:26:02',0),(1837,1015,150,5,'2025-05-01 13:26:02',0),(1838,1015,151,4,'2025-05-01 13:26:02',0),(1839,1015,152,6,'2025-05-01 13:26:02',0),(1840,1015,153,8,'2025-05-01 13:26:21',0),(1841,1027,135,7,'2025-05-01 13:26:21',0),(1842,1027,136,6,'2025-05-01 13:26:22',0),(1843,1027,137,7,'2025-05-01 13:26:23',0),(1844,1027,138,5,'2025-05-01 13:26:23',0),(1845,1027,139,6,'2025-05-01 13:26:23',0),(1846,1027,140,7,'2025-05-01 13:26:24',0),(1847,1027,141,8,'2025-05-01 13:26:24',0),(1848,1027,142,5,'2025-05-01 13:26:24',0),(1849,1027,143,4,'2025-05-01 13:26:25',0),(1850,1027,144,6,'2025-05-01 13:26:25',0),(1851,1027,145,7,'2025-05-01 13:26:25',0),(1852,1027,146,5,'2025-05-01 13:26:26',0),(1853,1027,147,4,'2025-05-01 13:26:26',0),(1854,1027,148,5,'2025-05-01 13:26:26',0),(1855,1027,149,6,'2025-05-01 13:26:27',0),(1856,1027,150,7,'2025-05-01 13:26:27',0),(1857,1027,151,5,'2025-05-01 13:26:27',0),(1858,1027,152,6,'2025-05-01 13:26:27',0),(1859,1027,153,5,'2025-05-01 13:26:28',0),(1860,1043,135,6,'2025-05-01 13:26:28',0),(1861,1043,136,7,'2025-05-01 13:26:28',0),(1862,1043,137,8,'2025-05-01 13:26:29',0),(1863,1043,140,7,'2025-05-01 13:26:29',0),(1864,1043,141,8,'2025-05-01 13:26:30',0),(1865,1043,138,8,'2025-05-01 13:26:38',0),(1866,1043,139,9,'2025-05-01 13:26:38',0),(1867,1043,142,6,'2025-05-01 13:26:40',0),(1868,1043,143,5,'2025-05-01 13:26:40',0),(1869,1043,144,6,'2025-05-01 13:26:40',0),(1870,1043,145,7,'2025-05-01 13:26:41',0),(1871,1043,146,5,'2025-05-01 13:26:41',0),(1872,1043,147,6,'2025-05-01 13:26:41',0),(1873,1043,148,5,'2025-05-01 13:26:42',0),(1874,1043,149,6,'2025-05-01 13:26:42',0),(1875,1043,150,7,'2025-05-01 13:26:42',0),(1876,1043,151,6,'2025-05-01 13:26:43',0),(1877,1043,152,7,'2025-05-01 13:26:43',0),(1878,1043,153,8,'2025-05-01 13:26:43',0),(1879,1057,135,0,'2025-05-01 13:26:44',0),(1880,1057,136,0,'2025-05-01 13:26:44',0),(1881,1057,137,0,'2025-05-01 13:26:44',0),(1882,1057,138,0,'2025-05-01 13:26:45',0),(1883,1057,139,0,'2025-05-01 13:26:45',0),(1884,1057,140,0,'2025-05-01 13:26:45',0),(1885,1057,141,0,'2025-05-01 13:26:46',0),(1886,1057,142,0,'2025-05-01 13:26:46',0),(1887,1057,143,0,'2025-05-01 13:26:46',0),(1888,1057,144,0,'2025-05-01 13:26:46',0),(1889,1057,145,0,'2025-05-01 13:26:47',0),(1890,1057,146,0,'2025-05-01 13:26:47',0),(1891,1057,147,0,'2025-05-01 13:26:47',0),(1892,1057,148,0,'2025-05-01 13:26:47',0),(1893,1057,149,0,'2025-05-01 13:26:48',0),(1894,1057,150,0,'2025-05-01 13:26:48',0),(1895,1057,151,0,'2025-05-01 13:26:48',0),(1896,1057,152,0,'2025-05-01 13:26:49',0),(1897,1057,153,0,'2025-05-01 13:26:50',0),(1898,1059,135,0,'2025-05-01 13:26:50',0),(1899,1059,136,0,'2025-05-01 13:26:50',0),(1900,1059,137,0,'2025-05-01 13:26:51',0),(1901,1059,138,0,'2025-05-01 13:26:51',0),(1902,1059,139,0,'2025-05-01 13:26:51',0),(1903,1059,140,0,'2025-05-01 13:26:52',0),(1904,1059,141,0,'2025-05-01 13:26:52',0),(1905,1059,142,0,'2025-05-01 13:26:56',0),(1906,1059,143,0,'2025-05-01 13:26:56',0),(1907,1059,144,0,'2025-05-01 13:26:57',0),(1908,1059,145,0,'2025-05-01 13:26:57',0),(1909,1059,146,0,'2025-05-01 13:26:57',0),(1910,1059,147,0,'2025-05-01 13:26:59',0),(1911,1059,148,0,'2025-05-01 13:27:00',0),(1912,1059,149,0,'2025-05-01 13:27:01',0),(1913,1059,150,0,'2025-05-01 13:27:01',0),(1914,1059,151,0,'2025-05-01 13:27:03',0),(1915,1059,152,0,'2025-05-01 13:27:03',0),(1916,1059,153,0,'2025-05-01 13:27:04',0),(1917,1001,154,9,'2025-05-01 13:30:51',0),(1918,1001,155,8,'2025-05-01 13:30:51',0),(1919,1001,156,9,'2025-05-01 13:30:51',0),(1920,1001,157,8,'2025-05-01 13:30:52',0),(1921,1001,158,9,'2025-05-01 13:30:52',0),(1922,1001,160,7,'2025-05-01 13:30:53',0),(1923,1001,161,6,'2025-05-01 13:30:53',0),(1924,1001,162,7,'2025-05-01 13:30:54',0),(1925,1001,163,8,'2025-05-01 13:30:54',0),(1926,1001,164,6,'2025-05-01 13:30:55',0),(1927,1001,165,7,'2025-05-01 13:30:56',0),(1928,1001,166,8,'2025-05-01 13:30:56',0),(1929,1001,168,7,'2025-05-01 13:30:57',0),(1930,1001,169,8,'2025-05-01 13:30:59',0),(1931,1001,170,7,'2025-05-01 13:30:59',0),(1932,1001,171,6,'2025-05-01 13:31:00',0),(1933,1001,173,8,'2025-05-01 13:31:01',0),(1934,1002,174,8,'2025-05-01 14:45:32',0),(1935,1002,175,7,'2025-05-01 14:45:32',0),(1936,1004,134,7,'2025-05-01 18:08:59',0),(1937,1005,134,8,'2025-05-01 18:09:01',0),(1938,1004,174,6,'2025-05-01 18:09:08',0),(1939,1004,175,8,'2025-05-01 18:09:08',0),(1940,1001,176,8,'2025-05-01 18:28:12',0),(1941,1001,177,7,'2025-05-01 18:28:13',0),(1942,1001,178,8,'2025-05-01 18:35:11',0),(1943,1001,179,9,'2025-05-01 18:35:12',0),(1944,1001,180,8,'2025-05-01 18:35:13',0),(1945,1071,181,7,'2025-05-01 20:41:49',0),(1946,1071,182,8,'2025-05-01 20:41:49',0),(1947,1071,183,8,'2025-05-01 20:42:04',0),(1948,1071,184,9,'2025-05-01 20:42:04',0);

/*Table structure for table `tbl_student_semester_score` */

DROP TABLE IF EXISTS `tbl_student_semester_score`;

CREATE TABLE `tbl_student_semester_score` (
  `student_semester_score_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `student_id` int(10) unsigned NOT NULL,
  `semester_exam_subject_id` int(11) NOT NULL,
  `score` float NOT NULL,
  `create_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`student_semester_score_id`),
  KEY `student_id` (`student_id`),
  KEY `semester_exam_subject_id` (`semester_exam_subject_id`),
  CONSTRAINT `semester_exam_subject_id` FOREIGN KEY (`semester_exam_subject_id`) REFERENCES `tbl_semester_exam_subjects` (`id`) ON DELETE CASCADE,
  CONSTRAINT `tbl_student_semester_score_ibfk_1` FOREIGN KEY (`student_id`) REFERENCES `tbl_student_info` (`student_id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=200 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_student_semester_score` */

insert  into `tbl_student_semester_score`(`student_semester_score_id`,`student_id`,`semester_exam_subject_id`,`score`,`create_date`,`isDeleted`) values (160,1008,71,7,'2025-05-01 11:49:54',0),(161,1009,71,10,'2025-05-01 11:50:17',0),(162,1002,71,7,'2025-05-01 14:24:54',0),(163,1002,72,8,'2025-05-01 14:24:54',0),(164,1002,73,8,'2025-05-01 14:24:55',0),(165,1008,72,8,'2025-05-01 14:27:47',0),(166,1008,73,7,'2025-05-01 14:27:47',0),(167,1009,72,8,'2025-05-01 14:27:50',0),(168,1009,73,7,'2025-05-01 14:27:50',0),(169,1002,74,9,'2025-05-01 14:46:03',0),(170,1002,75,9,'2025-05-01 14:46:05',0),(171,1004,74,8,'2025-05-01 18:07:45',0),(172,1004,75,9,'2025-05-01 18:07:45',0),(173,1005,74,8,'2025-05-01 18:07:47',0),(174,1005,75,9,'2025-05-01 18:07:47',0),(175,1006,74,8,'2025-05-01 18:07:48',0),(176,1006,75,6,'2025-05-01 18:07:49',0),(177,1004,71,8,'2025-05-01 18:08:01',0),(178,1004,72,9,'2025-05-01 18:08:04',0),(179,1004,73,7,'2025-05-01 18:08:05',0),(180,1005,71,6,'2025-05-01 18:08:06',0),(181,1005,72,5,'2025-05-01 18:08:07',0),(182,1005,73,7,'2025-05-01 18:08:07',0),(183,1006,71,8,'2025-05-01 18:08:08',0),(184,1006,72,5,'2025-05-01 18:08:09',0),(185,1006,73,6,'2025-05-01 18:08:09',0),(186,1007,71,8,'2025-05-01 18:08:09',0),(187,1007,72,8,'2025-05-01 18:08:11',0),(188,1007,73,7,'2025-05-01 18:08:12',0),(189,1001,76,7,'2025-05-01 18:28:29',0),(190,1001,77,8,'2025-05-01 18:28:32',0),(191,1001,78,8,'2025-05-01 18:29:06',0),(192,1001,79,7,'2025-05-01 18:29:07',0),(193,1001,80,9,'2025-05-01 18:29:08',0),(194,1071,81,7,'2025-05-01 20:42:20',0),(195,1071,82,8,'2025-05-01 20:42:20',0),(196,1071,83,7,'2025-05-01 20:42:22',0),(197,1071,84,7,'2025-05-01 20:42:39',0),(198,1071,85,8,'2025-05-01 20:42:40',0),(199,1071,86,9,'2025-05-01 20:42:41',0);

/*Table structure for table `tbl_study` */

DROP TABLE IF EXISTS `tbl_study`;

CREATE TABLE `tbl_study` (
  `study_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `student_id` int(10) unsigned NOT NULL,
  `class_id` int(10) unsigned NOT NULL,
  `year_study_id` int(10) unsigned NOT NULL,
  `enrollment_date` date NOT NULL DEFAULT curdate(),
  `status` varchar(50) DEFAULT 'active',
  `create_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`study_id`),
  KEY `student_id` (`student_id`),
  KEY `class_id` (`class_id`),
  KEY `year_study_id` (`year_study_id`),
  CONSTRAINT `fk_study_class` FOREIGN KEY (`class_id`) REFERENCES `tbl_classroom` (`class_id`),
  CONSTRAINT `fk_study_student` FOREIGN KEY (`student_id`) REFERENCES `tbl_student_info` (`student_id`),
  CONSTRAINT `fk_study_year` FOREIGN KEY (`year_study_id`) REFERENCES `tbl_year_study` (`year_study_id`)
) ENGINE=InnoDB AUTO_INCREMENT=128 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_study` */

insert  into `tbl_study`(`study_id`,`student_id`,`class_id`,`year_study_id`,`enrollment_date`,`status`,`create_date`,`isDeleted`) values (70,1001,10,1,'2025-04-08','active','2025-04-08 16:35:57',0),(74,1003,10,1,'2025-04-10','inactive','2025-04-10 18:52:57',0),(75,1015,10,1,'2025-04-10','inactive','2025-04-10 18:52:57',0),(76,1043,10,1,'2025-04-10','inactive','2025-04-10 18:52:57',0),(77,1057,10,1,'2025-04-17','inactive','2025-04-17 20:54:41',0),(78,1027,10,1,'2025-04-17','inactive','2025-04-17 20:54:41',0),(79,1003,11,1,'2025-04-27','active','2025-04-27 09:33:16',0),(80,1015,11,1,'2025-04-27','active','2025-04-27 09:33:16',0),(81,1043,11,1,'2025-04-27','active','2025-04-27 09:33:16',0),(82,1057,11,1,'2025-04-27','active','2025-04-27 09:33:16',0),(83,1027,11,1,'2025-04-27','active','2025-04-27 09:33:16',0),(84,1059,11,1,'2025-04-30','active','2025-04-30 01:43:43',0),(85,1012,14,1,'2025-05-01','active','2025-05-01 09:48:02',0),(86,1032,14,1,'2025-05-01','active','2025-05-01 09:48:02',0),(87,1008,14,1,'2025-05-01','active','2025-05-01 09:48:02',0),(88,1021,14,1,'2025-05-01','active','2025-05-01 09:48:02',0),(89,1009,14,1,'2025-05-01','active','2025-05-01 09:48:02',0),(90,1041,14,1,'2025-05-01','active','2025-05-01 09:48:02',0),(91,1025,14,1,'2025-05-01','active','2025-05-01 09:48:02',0),(92,1029,14,1,'2025-05-01','active','2025-05-01 11:47:16',0),(93,1017,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(94,1060,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(95,1006,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(96,1030,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(97,1002,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(98,1020,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(99,1034,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(100,1026,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(101,1037,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(102,1022,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(103,1004,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(104,1042,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(105,1019,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(106,1018,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(107,1033,14,1,'2025-05-01','active','2025-05-01 12:15:58',0),(108,1023,14,1,'2025-05-01','active','2025-05-01 12:21:34',0),(109,1038,14,1,'2025-05-01','active','2025-05-01 12:21:34',0),(110,1040,14,1,'2025-05-01','active','2025-05-01 12:21:34',0),(111,1035,14,1,'2025-05-01','active','2025-05-01 12:21:34',0),(112,1010,14,1,'2025-05-01','active','2025-05-01 12:21:34',0),(113,1005,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(114,1016,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(115,1044,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(116,1058,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(117,1028,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(118,1031,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(119,1013,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(120,1061,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(121,1007,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(122,1011,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(123,1036,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(124,1014,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(125,1039,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(126,1024,14,1,'2025-05-01','active','2025-05-01 12:37:57',0),(127,1071,15,1,'2025-05-01','active','2025-05-01 20:41:23',0);

/*Table structure for table `tbl_subject` */

DROP TABLE IF EXISTS `tbl_subject`;

CREATE TABLE `tbl_subject` (
  `subject_code` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `subject_name` varchar(255) NOT NULL,
  `create_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`subject_code`),
  UNIQUE KEY `unique_subject_name` (`subject_name`),
  UNIQUE KEY `subject_name` (`subject_name`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_subject` */

insert  into `tbl_subject`(`subject_code`,`subject_name`,`create_date`,`isDeleted`) values (1,'គណិតវិទ្យា','2025-02-24 11:59:00',0),(2,'ភាសាខ្មែរ','2025-02-24 11:59:08',0),(3,'វិទ្យាសាស្ត្រ','2025-02-24 17:58:35',0),(4,'សិក្សាសង្គម','2025-02-24 17:58:44',0),(5,'អប់រំកាយ-សុខភាពកីឡា','2025-02-24 17:59:07',0),(6,'អប់រំបំណិនជីវិត','2025-02-24 17:59:20',0),(7,'ភាសាបរទេស','2025-02-24 17:59:34',0),(8,'សម្ថភាពស្ដាប់','2025-02-27 23:58:11',0),(9,'សម្ថភាពសរសេរ','2025-02-27 23:58:20',0),(10,'សម្ថភាពអាន','2025-02-27 23:58:29',0),(11,'សម្ថភាពនិយាយ','2025-02-27 23:58:37',0),(12,'ចំនួន','2025-02-27 23:58:41',0),(13,'រង្វាស់រង្វាល់','2025-02-27 23:58:50',0),(14,'ធរណីមាត្រ','2025-02-27 23:58:57',0),(15,'ពីជគណិត','2025-02-27 23:59:04',0),(16,'ស្ថិតិ','2025-02-27 23:59:11',0),(17,'រូបវិទ្យា','2025-02-27 23:59:19',0),(18,'គីមីវិទ្យា','2025-02-27 23:59:26',0),(19,'ជីវវិទ្យា','2025-02-27 23:59:36',0),(20,'ផែនដី-បរិស្ថានវិទ្យា','2025-02-27 23:59:55',0),(21,'សីលធម៌-ពលរដ្ឋវិទ្យា','2025-02-28 00:00:11',0),(22,'ភូមិវិទ្យា','2025-02-28 00:00:20',0),(23,'ប្រវត្តិវិទ្យា','2025-02-28 00:00:32',0),(24,'គេហវិទ្យា-អប់រំសិល្បៈ','2025-02-28 00:00:55',0),(25,'អប់រំកាយ-កីឡា','2025-02-28 00:01:08',0),(26,'សុខភាព-អនាម័យ','2025-02-28 00:01:24',0);

/*Table structure for table `tbl_user` */

DROP TABLE IF EXISTS `tbl_user`;

CREATE TABLE `tbl_user` (
  `user_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `full_name` varchar(255) DEFAULT NULL,
  `user_name` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `phone` varchar(255) NOT NULL,
  `user_type` varchar(255) NOT NULL,
  `status` int(2) DEFAULT 1,
  `created_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_user` */

insert  into `tbl_user`(`user_id`,`full_name`,`user_name`,`password`,`phone`,`user_type`,`status`,`created_date`,`isDeleted`) values (1,'ពៅ សំ','khmersr','$2y$10$LljfIoNdd4ua088RMl9NnOowB8a.ljbgQd6wD.hBX0jnNNfiGXE1q','098582828','admin',1,'0000-00-00 00:00:00',0),(2,'Norea PMS','admin_norea','$2y$10$1Ow1S23GKdkv1uR5ZS.seOO0w0.t4AMkZyOmJm6I3lmnMOsyVLaQa','0123456789','super_admin',1,'2025-02-02 11:41:44',0),(3,'នី ឡេនីន','lenin','$2y$10$F05Y.0ET3h7BBJHwmqPyuuu7nyhKLnmwtAEhyyIb7BlLibt.Bt04S','054359273','user',1,'2025-02-02 11:42:01',0),(4,'ផល សុផាត','sophat','$2y$10$y7fU6kwX40R/wYZUu9zrNe5fFQ1eQKNn4g0M/R8AKpwo6eiQpl/YO','0123456','user',1,'2025-02-11 23:15:10',0),(5,'ឃុត ទីណា','tina','$2y$10$yegGusbbXzg0EQocY4SoCeFVncn31a1WzcDGaPVZ4nbFEfw6KVohK','099887766','user',1,'2025-04-06 15:08:14',0),(6,'បោយ លីន','test','$2y$10$tkvDTFUzRI7ei3fFYEb3hOEJu2YMehkVoXemeTuRSMGVWJMl4r3Y2','0123456','user',1,'2025-04-30 21:58:17',0),(7,'bhhhh','hhhhh','$2y$10$p5IUQGhqaVG5bu8EEYH3ROdk03XREOBENoXc1/9SIjjifLZzFGqFi','0001012','user',1,'2025-05-01 10:32:24',0);

/*Table structure for table `tbl_year_study` */

DROP TABLE IF EXISTS `tbl_year_study`;

CREATE TABLE `tbl_year_study` (
  `year_study_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `year_study` varchar(255) NOT NULL,
  `create_date` timestamp NOT NULL DEFAULT current_timestamp(),
  `isDeleted` int(2) DEFAULT 0,
  PRIMARY KEY (`year_study_id`),
  UNIQUE KEY `year_study` (`year_study`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

/*Data for the table `tbl_year_study` */

insert  into `tbl_year_study`(`year_study_id`,`year_study`,`create_date`,`isDeleted`) values (1,'2025-2026','2025-02-02 09:49:37',0),(2,'2026-2027','2025-02-02 09:49:37',0),(3,'2027-2028','2025-02-02 09:49:37',0),(4,'2028-2029','2025-04-08 17:37:54',0),(5,'2029-2030','2025-04-08 17:43:17',0);

/* Procedure structure for procedure `CalculateFinalSemesterAverage` */

/*!50003 DROP PROCEDURE IF EXISTS  `CalculateFinalSemesterAverage` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `CalculateFinalSemesterAverage`(
    IN p_student_id INT,
    IN p_semester_id INT,
    IN p_class_id INT,
    IN p_monthly_ids VARCHAR(255)
)
BEGIN
    DECLARE v_monthly_avg DECIMAL(5,2);
    DECLARE v_semester_exam_avg DECIMAL(5,2);
    
    -- Calculate monthly average using the exact same method as CalculateStudentMonthlyAverage
    WITH monthly_scores AS (
        SELECT 
            sms.student_id,
            csms.monthly_id,
            AVG(sms.score) as monthly_average
        FROM tbl_student_monthly_score sms
        JOIN classroom_subject_monthly_score csms 
            ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
        WHERE sms.student_id = p_student_id
        AND csms.class_id = p_class_id
        AND FIND_IN_SET(csms.monthly_id, p_monthly_ids)
        AND sms.isDeleted = 0
        GROUP BY sms.student_id, csms.monthly_id
    )
    SELECT AVG(monthly_average) INTO v_monthly_avg
    FROM monthly_scores;
    
    -- Calculate semester exam average
    SELECT 
        AVG(sss.score) INTO v_semester_exam_avg
    FROM tbl_student_semester_score sss
    JOIN tbl_semester_exam_subjects ses 
        ON sss.semester_exam_subject_id = ses.id
    WHERE sss.student_id = p_student_id
    AND ses.semester_id = p_semester_id
    AND ses.class_id = p_class_id
    AND sss.isDeleted = 0;
    
    -- Calculate final average
    SELECT 
        p_student_id as student_id,
        v_monthly_avg as monthly_average,
        v_semester_exam_avg as semester_exam_average,
        (v_monthly_avg + v_semester_exam_avg) / 2 as final_semester_average;
END */$$
DELIMITER ;

/* Procedure structure for procedure `CalculateMonthlyAverage` */

/*!50003 DROP PROCEDURE IF EXISTS  `CalculateMonthlyAverage` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `CalculateMonthlyAverage`(
    IN p_student_id INT,
    IN p_monthly_ids VARCHAR(255)  -- Comma-separated list of selected month IDs
)
BEGIN
    -- First, calculate average for each month separately
    WITH monthly_averages AS (
        SELECT 
            csms.monthly_id,
            m.month_name,
            COUNT(DISTINCT csms.assign_subject_grade_id) as subjects_in_month,
            AVG(sms.score) as month_average,
            SUM(sms.score) as month_total
        FROM tbl_student_monthly_score sms
        JOIN classroom_subject_monthly_score csms 
            ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
        JOIN tbl_monthly m ON csms.monthly_id = m.monthly_id
        WHERE sms.student_id = p_student_id
        AND FIND_IN_SET(csms.monthly_id, p_monthly_ids)
        AND sms.isDeleted = 0
        AND csms.isDeleted = 0
        GROUP BY csms.monthly_id, m.month_name
    )
    -- Then calculate the overall average
    SELECT 
        AVG(month_average) as overall_average,
        COUNT(DISTINCT monthly_id) as months_counted,
        SUM(subjects_in_month) as total_subjects,
        GROUP_CONCAT(
            CONCAT(month_name, ' (', subjects_in_month, ' subjects, avg: ', ROUND(month_average, 2), ')')
            ORDER BY monthly_id
        ) as monthly_details,
        SUM(month_total) as total_score
    FROM monthly_averages;
END */$$
DELIMITER ;

/* Procedure structure for procedure `CalculateSemesterScore` */

/*!50003 DROP PROCEDURE IF EXISTS  `CalculateSemesterScore` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `CalculateSemesterScore`(
    IN p_student_id INT,
    IN p_class_id INT,
    IN p_semester_id INT,
    IN p_monthly_ids VARCHAR(255)
)
BEGIN
    SELECT 
        sms.student_id,
        si.student_name,
        AVG(sms.score) as monthly_average,
        COUNT(DISTINCT csms.monthly_id) as months_counted,
        (
            SELECT AVG(score) 
            FROM tbl_student_semester_exam_scores 
            WHERE student_id = sms.student_id 
            AND class_id = p_class_id 
            AND semester_id = p_semester_id 
            AND isDeleted = 0
        ) as semester_exam_score,
        (
            SELECT COUNT(DISTINCT semester_exam_subject_id) 
            FROM tbl_student_semester_exam_scores 
            WHERE student_id = sms.student_id 
            AND class_id = p_class_id 
            AND semester_id = p_semester_id 
            AND isDeleted = 0
        ) as exam_subjects_count,
        (
            (AVG(sms.score) + (
                SELECT AVG(score) 
                FROM tbl_student_semester_exam_scores 
                WHERE student_id = sms.student_id 
                AND class_id = p_class_id 
                AND semester_id = p_semester_id 
                AND isDeleted = 0
            )) / 2
        ) as final_score
    FROM tbl_student_monthly_score sms
    JOIN classroom_subject_monthly_score csms 
        ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
    JOIN tbl_student_info si 
        ON sms.student_id = si.student_id
    WHERE sms.student_id = p_student_id
    AND csms.class_id = p_class_id
    AND FIND_IN_SET(csms.monthly_id, p_monthly_ids)
    AND sms.isDeleted = 0
    GROUP BY sms.student_id, si.student_name;
END */$$
DELIMITER ;

/* Procedure structure for procedure `CalculateStudentMonthlyAverage` */

/*!50003 DROP PROCEDURE IF EXISTS  `CalculateStudentMonthlyAverage` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `CalculateStudentMonthlyAverage`(
    IN p_student_id INT,
    IN p_class_id INT,
    IN p_monthly_ids VARCHAR(255)
)
BEGIN
    WITH monthly_scores AS (
        SELECT 
            sms.student_id,
            csms.monthly_id,
            ROUND(AVG(sms.score), 2) as monthly_average
        FROM tbl_student_monthly_score sms
        JOIN classroom_subject_monthly_score csms 
            ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
        WHERE sms.student_id = p_student_id
        AND csms.class_id = p_class_id
        AND FIND_IN_SET(csms.monthly_id, p_monthly_ids)
        AND sms.isDeleted = 0
        GROUP BY sms.student_id, csms.monthly_id
    )
    SELECT 
        student_id,
        ROUND(AVG(monthly_average), 2) as final_monthly_average,
        COUNT(DISTINCT monthly_id) as months_counted
    FROM monthly_scores
    GROUP BY student_id;
END */$$
DELIMITER ;

/* Procedure structure for procedure `CalculateStudentSemesterExamAverage` */

/*!50003 DROP PROCEDURE IF EXISTS  `CalculateStudentSemesterExamAverage` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `CalculateStudentSemesterExamAverage`(
    IN p_student_id INT,
    IN p_semester_id INT,
    IN p_class_id INT
)
BEGIN
    SELECT 
        sss.student_id,
        AVG(sss.score) as semester_exam_average,
        COUNT(DISTINCT ses.id) as subjects_counted
    FROM tbl_student_semester_score sss
    JOIN tbl_semester_exam_subjects ses 
        ON sss.semester_exam_subject_id = ses.id
    WHERE sss.student_id = p_student_id
    AND ses.semester_id = p_semester_id
    AND ses.class_id = p_class_id
    AND sss.isDeleted = 0
    GROUP BY sss.student_id;
END */$$
DELIMITER ;

/* Procedure structure for procedure `CalculateYearlyAverage` */

/*!50003 DROP PROCEDURE IF EXISTS  `CalculateYearlyAverage` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `CalculateYearlyAverage`(
    IN p_student_id INT,
    IN p_class_id INT,
    IN p_semester1_monthly_ids VARCHAR(255),
    IN p_semester2_monthly_ids VARCHAR(255)
)
BEGIN
    DECLARE semester1_monthly_avg DECIMAL(5,2);
    DECLARE semester1_exam_avg DECIMAL(5,2);
    DECLARE semester2_monthly_avg DECIMAL(5,2);
    DECLARE semester2_exam_avg DECIMAL(5,2);
    DECLARE semester1_final DECIMAL(5,2);
    DECLARE semester2_final DECIMAL(5,2);
    DECLARE year_avg DECIMAL(5,2);
    -- Calculate Semester 1 Monthly Average
    SELECT AVG(sms.score) INTO semester1_monthly_avg
    FROM tbl_student_monthly_score sms
    JOIN classroom_subject_monthly_score csms 
        ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
    WHERE sms.student_id = p_student_id
      AND csms.class_id = p_class_id
      AND FIND_IN_SET(csms.monthly_id, p_semester1_monthly_ids)
      AND sms.isDeleted = 0;
    -- Calculate Semester 1 Exam Average
    SELECT AVG(sss.score) INTO semester1_exam_avg
    FROM tbl_student_semester_score sss
    JOIN tbl_semester_exam_subjects ses 
        ON sss.semester_exam_subject_id = ses.id
    WHERE sss.student_id = p_student_id
      AND ses.class_id = p_class_id
      AND ses.semester_id = 1
      AND sss.isDeleted = 0;
    -- Calculate Semester 2 Monthly Average
    SELECT AVG(sms.score) INTO semester2_monthly_avg
    FROM tbl_student_monthly_score sms
    JOIN classroom_subject_monthly_score csms 
        ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
    WHERE sms.student_id = p_student_id
      AND csms.class_id = p_class_id
      AND FIND_IN_SET(csms.monthly_id, p_semester2_monthly_ids)
      AND sms.isDeleted = 0;
    -- Calculate Semester 2 Exam Average
    SELECT AVG(sss.score) INTO semester2_exam_avg
    FROM tbl_student_semester_score sss
    JOIN tbl_semester_exam_subjects ses 
        ON sss.semester_exam_subject_id = ses.id
    WHERE sss.student_id = p_student_id
      AND ses.class_id = p_class_id
      AND ses.semester_id = 2
      AND sss.isDeleted = 0;
    -- Calculate final averages
    SET semester1_final = (IFNULL(semester1_monthly_avg, 0) + IFNULL(semester1_exam_avg, 0)) / 2;
    SET semester2_final = (IFNULL(semester2_monthly_avg, 0) + IFNULL(semester2_exam_avg, 0)) / 2;
    SET year_avg = (semester1_final + semester2_final) / 2;
    -- Return the results
    SELECT 
        p_student_id AS student_id,
        ROUND(semester1_monthly_avg, 2) AS semester1_monthly_average,
        ROUND(semester1_exam_avg, 2) AS semester1_exam_average,
        ROUND(semester1_final, 2) AS semester1_final_average,
        ROUND(semester2_monthly_avg, 2) AS semester2_monthly_average,
        ROUND(semester2_exam_avg, 2) AS semester2_exam_average,
        ROUND(semester2_final, 2) AS semester2_final_average,
        ROUND(year_avg, 2) AS yearly_average;
END */$$
DELIMITER ;

/* Procedure structure for procedure `CalculateYearlyAverageForClass` */

/*!50003 DROP PROCEDURE IF EXISTS  `CalculateYearlyAverageForClass` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `CalculateYearlyAverageForClass`(
    IN p_class_id INT
)
BEGIN
    -- Create temporary table to store results
    CREATE TEMPORARY TABLE IF NOT EXISTS temp_yearly_averages (
        student_id INT,
        class_id INT,
        semester1_final_avg DECIMAL(5,2),
        semester2_final_avg DECIMAL(5,2),
        year_avg DECIMAL(5,2)
    );
    -- Get all active students in the class
    INSERT INTO temp_yearly_averages (student_id, class_id)
    SELECT s.student_id, p_class_id
    FROM tbl_student_info s
    JOIN tbl_study st ON s.student_id = st.student_id
    WHERE st.class_id = p_class_id 
      AND st.status = 'active'
      AND s.isDeleted = 0
      AND st.isDeleted = 0
      AND s.student_name IS NOT NULL
      AND s.student_name <> '';
    -- Update semester 1 monthly averages (semester 1 months)
    UPDATE temp_yearly_averages t
    SET t.semester1_final_avg = (
        SELECT AVG(sms.score)
        FROM tbl_student_monthly_score sms
        JOIN classroom_subject_monthly_score csms
          ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
        JOIN tbl_monthly m
          ON csms.monthly_id = m.monthly_id
        WHERE sms.student_id = t.student_id
          AND csms.class_id = p_class_id
          AND m.semester_id = 1
          AND sms.isDeleted = 0
    );
    -- Update semester 1 exam averages
    UPDATE temp_yearly_averages t
    SET t.semester1_final_avg = (
        (IFNULL(t.semester1_final_avg, 0) + 
        IFNULL((
            SELECT AVG(sss.score)
            FROM tbl_student_semester_score sss
            JOIN tbl_semester_exam_subjects ses
              ON sss.semester_exam_subject_id = ses.id
            WHERE sss.student_id = t.student_id
              AND ses.class_id = p_class_id
              AND ses.semester_id = 1
              AND sss.isDeleted = 0
        ), 0)) / 2
    );
    -- Update semester 2 monthly averages (semester 2 months)
    UPDATE temp_yearly_averages t
    SET t.semester2_final_avg = (
        SELECT AVG(sms.score)
        FROM tbl_student_monthly_score sms
        JOIN classroom_subject_monthly_score csms
          ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
        JOIN tbl_monthly m
          ON csms.monthly_id = m.monthly_id
        WHERE sms.student_id = t.student_id
          AND csms.class_id = p_class_id
          AND m.semester_id = 2
          AND sms.isDeleted = 0
    );
    -- Update semester 2 exam averages
    UPDATE temp_yearly_averages t
    SET t.semester2_final_avg = (
        (IFNULL(t.semester2_final_avg, 0) + 
        IFNULL((
            SELECT AVG(sss.score)
            FROM tbl_student_semester_score sss
            JOIN tbl_semester_exam_subjects ses
              ON sss.semester_exam_subject_id = ses.id
            WHERE sss.student_id = t.student_id
              AND ses.class_id = p_class_id
              AND ses.semester_id = 2
              AND sss.isDeleted = 0
        ), 0)) / 2
    );
    -- Calculate yearly average
    UPDATE temp_yearly_averages
    SET year_avg = (IFNULL(semester1_final_avg, 0) + IFNULL(semester2_final_avg, 0)) / 2;
    -- Return results with student names
    SELECT 
        t.student_id,
        s.student_name,
        t.class_id,
        t.semester1_final_avg,
        t.semester2_final_avg,
        t.year_avg
    FROM temp_yearly_averages t
    JOIN tbl_student_info s ON t.student_id = s.student_id
    ORDER BY s.student_name;
    -- Clean up
    DROP TEMPORARY TABLE IF EXISTS temp_yearly_averages;
END */$$
DELIMITER ;

/* Procedure structure for procedure `CalculateYearlyAverageForStudent` */

/*!50003 DROP PROCEDURE IF EXISTS  `CalculateYearlyAverageForStudent` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `CalculateYearlyAverageForStudent`(
    IN p_student_id INT,
    IN p_class_id INT
)
BEGIN
    DECLARE semester1_monthly_avg DECIMAL(5,2);
    DECLARE semester1_exam_avg DECIMAL(5,2);
    DECLARE semester2_monthly_avg DECIMAL(5,2);
    DECLARE semester2_exam_avg DECIMAL(5,2);
    DECLARE semester1_final DECIMAL(5,2);
    DECLARE semester2_final DECIMAL(5,2);
    DECLARE year_avg DECIMAL(5,2);
    -- Semester 1 monthly average
    SELECT AVG(sms.score) INTO semester1_monthly_avg
    FROM tbl_student_monthly_score sms
    JOIN classroom_subject_monthly_score csms
      ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
    WHERE sms.student_id = p_student_id
      AND csms.class_id = p_class_id
      AND csms.monthly_id IN (1) -- months for semester 1
      AND sms.isDeleted = 0;
    -- Semester 1 exam average
    SELECT AVG(sss.score) INTO semester1_exam_avg
    FROM tbl_student_semester_score sss
    JOIN tbl_semester_exam_subjects ses
      ON sss.semester_exam_subject_id = ses.id
    WHERE sss.student_id = p_student_id
      AND ses.class_id = p_class_id
      AND ses.semester_id = 1
      AND sss.isDeleted = 0;
    -- Semester 2 monthly average
    SELECT AVG(sms.score) INTO semester2_monthly_avg
    FROM tbl_student_monthly_score sms
    JOIN classroom_subject_monthly_score csms
      ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
    WHERE sms.student_id = p_student_id
      AND csms.class_id = p_class_id
      AND csms.monthly_id IN (3) -- months for semester 2
      AND sms.isDeleted = 0;
    -- Semester 2 exam average
    SELECT AVG(sss.score) INTO semester2_exam_avg
    FROM tbl_student_semester_score sss
    JOIN tbl_semester_exam_subjects ses
      ON sss.semester_exam_subject_id = ses.id
    WHERE sss.student_id = p_student_id
      AND ses.class_id = p_class_id
      AND ses.semester_id = 2
      AND sss.isDeleted = 0;
    -- Calculate final averages
    SET semester1_final = (IFNULL(semester1_monthly_avg,0) + IFNULL(semester1_exam_avg,0)) / 2;
    SET semester2_final = (IFNULL(semester2_monthly_avg,0) + IFNULL(semester2_exam_avg,0)) / 2;
    SET year_avg = (semester1_final + semester2_final) / 2;
    -- Return result
    SELECT 
        p_student_id AS student_id,
        p_class_id AS class_id,
        semester1_final AS semester1_final_avg,
        semester2_final AS semester2_final_avg,
        year_avg AS year_avg;
END */$$
DELIMITER ;

/* Procedure structure for procedure `CalculateYearlyAveragesForClass` */

/*!50003 DROP PROCEDURE IF EXISTS  `CalculateYearlyAveragesForClass` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `CalculateYearlyAveragesForClass`(IN p_class_id INT)
BEGIN
    SELECT 
        s.student_id,
        s.student_name,
        c.class_id,
        c.class_name,
        -- Semester 1 Monthly Average (dynamic)
        (SELECT AVG(sms1.score)
         FROM tbl_student_monthly_score sms1
         JOIN classroom_subject_monthly_score csms1 ON sms1.classroom_subject_monthly_score_id = csms1.classroom_subject_monthly_score_id
         JOIN tbl_monthly m1 ON csms1.monthly_id = m1.monthly_id
         WHERE sms1.student_id = s.student_id 
           AND csms1.class_id = c.class_id
           AND m1.semester_id = 1
           AND sms1.isDeleted = 0
        ) AS semester1_monthly_avg,
        -- Semester 1 Exam Average
        (SELECT AVG(sss1.score)
         FROM tbl_student_semester_score sss1
         JOIN tbl_semester_exam_subjects ses1 ON sss1.semester_exam_subject_id = ses1.id
         WHERE sss1.student_id = s.student_id
           AND ses1.class_id = c.class_id
           AND ses1.semester_id = 1
           AND sss1.isDeleted = 0
        ) AS semester1_exam_avg,
        -- Semester 2 Monthly Average (dynamic)
        (SELECT AVG(sms2.score)
         FROM tbl_student_monthly_score sms2
         JOIN classroom_subject_monthly_score csms2 ON sms2.classroom_subject_monthly_score_id = csms2.classroom_subject_monthly_score_id
         JOIN tbl_monthly m2 ON csms2.monthly_id = m2.monthly_id
         WHERE sms2.student_id = s.student_id
           AND csms2.class_id = c.class_id
           AND m2.semester_id = 2
           AND sms2.isDeleted = 0
        ) AS semester2_monthly_avg,
        -- Semester 2 Exam Average
        (SELECT AVG(sss2.score)
         FROM tbl_student_semester_score sss2
         JOIN tbl_semester_exam_subjects ses2 ON sss2.semester_exam_subject_id = ses2.id
         WHERE sss2.student_id = s.student_id
           AND ses2.class_id = c.class_id
           AND ses2.semester_id = 2
           AND sss2.isDeleted = 0
        ) AS semester2_exam_avg,
        -- Final Averages
        (
            IFNULL(
                (SELECT AVG(sms1.score)
                 FROM tbl_student_monthly_score sms1
                 JOIN classroom_subject_monthly_score csms1 ON sms1.classroom_subject_monthly_score_id = csms1.classroom_subject_monthly_score_id
                 JOIN tbl_monthly m1 ON csms1.monthly_id = m1.monthly_id
                 WHERE sms1.student_id = s.student_id 
                   AND csms1.class_id = c.class_id
                   AND m1.semester_id = 1
                   AND sms1.isDeleted = 0
                ), 0
            ) + 
            IFNULL(
                (SELECT AVG(sss1.score)
                 FROM tbl_student_semester_score sss1
                 JOIN tbl_semester_exam_subjects ses1 ON sss1.semester_exam_subject_id = ses1.id
                 WHERE sss1.student_id = s.student_id
                   AND ses1.class_id = c.class_id
                   AND ses1.semester_id = 1
                   AND sss1.isDeleted = 0
                ), 0
            )
        ) / 2 AS semester1_final_avg,
        (
            IFNULL(
                (SELECT AVG(sms2.score)
                 FROM tbl_student_monthly_score sms2
                 JOIN classroom_subject_monthly_score csms2 ON sms2.classroom_subject_monthly_score_id = csms2.classroom_subject_monthly_score_id
                 JOIN tbl_monthly m2 ON csms2.monthly_id = m2.monthly_id
                 WHERE sms2.student_id = s.student_id
                   AND csms2.class_id = c.class_id
                   AND m2.semester_id = 2
                   AND sms2.isDeleted = 0
                ), 0
            ) + 
            IFNULL(
                (SELECT AVG(sss2.score)
                 FROM tbl_student_semester_score sss2
                 JOIN tbl_semester_exam_subjects ses2 ON sss2.semester_exam_subject_id = ses2.id
                 WHERE sss2.student_id = s.student_id
                   AND ses2.class_id = c.class_id
                   AND ses2.semester_id = 2
                   AND sss2.isDeleted = 0
                ), 0
            )
        ) / 2 AS semester2_final_avg,
        -- Yearly Average
        (
            (
                IFNULL(
                    (SELECT AVG(sms1.score)
                     FROM tbl_student_monthly_score sms1
                     JOIN classroom_subject_monthly_score csms1 ON sms1.classroom_subject_monthly_score_id = csms1.classroom_subject_monthly_score_id
                     JOIN tbl_monthly m1 ON csms1.monthly_id = m1.monthly_id
                     WHERE sms1.student_id = s.student_id 
                       AND csms1.class_id = c.class_id
                       AND m1.semester_id = 1
                       AND sms1.isDeleted = 0
                    ), 0
                ) + 
                IFNULL(
                    (SELECT AVG(sss1.score)
                     FROM tbl_student_semester_score sss1
                     JOIN tbl_semester_exam_subjects ses1 ON sss1.semester_exam_subject_id = ses1.id
                     WHERE sss1.student_id = s.student_id
                       AND ses1.class_id = c.class_id
                       AND ses1.semester_id = 1
                       AND sss1.isDeleted = 0
                    ), 0
                )
            ) / 2
            +
            (
                IFNULL(
                    (SELECT AVG(sms2.score)
                     FROM tbl_student_monthly_score sms2
                     JOIN classroom_subject_monthly_score csms2 ON sms2.classroom_subject_monthly_score_id = csms2.classroom_subject_monthly_score_id
                     JOIN tbl_monthly m2 ON csms2.monthly_id = m2.monthly_id
                     WHERE sms2.student_id = s.student_id
                       AND csms2.class_id = c.class_id
                       AND m2.semester_id = 2
                       AND sms2.isDeleted = 0
                    ), 0
                ) + 
                IFNULL(
                    (SELECT AVG(sss2.score)
                     FROM tbl_student_semester_score sss2
                     JOIN tbl_semester_exam_subjects ses2 ON sss2.semester_exam_subject_id = ses2.id
                     WHERE sss2.student_id = s.student_id
                       AND ses2.class_id = c.class_id
                       AND ses2.semester_id = 2
                       AND sss2.isDeleted = 0
                    ), 0
                )
            ) / 2
        ) / 2 AS yearly_avg
    FROM tbl_student_info s
    JOIN tbl_study st ON s.student_id = st.student_id
    JOIN tbl_classroom c ON st.class_id = c.class_id
    WHERE c.class_id = p_class_id
      AND st.status = 'active'
      AND s.isDeleted = 0
      AND st.isDeleted = 0
    ORDER BY s.student_name;
END */$$
DELIMITER ;

/* Procedure structure for procedure `CalculateYearlyAverageWithMonthlyIds` */

/*!50003 DROP PROCEDURE IF EXISTS  `CalculateYearlyAverageWithMonthlyIds` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `CalculateYearlyAverageWithMonthlyIds`(
    IN p_student_id INT,
    IN p_class_id INT,
    IN p_semester1_monthly_ids VARCHAR(255),
    IN p_semester2_monthly_ids VARCHAR(255)
)
BEGIN
    DECLARE semester1_avg DECIMAL(5,2);
    DECLARE semester2_avg DECIMAL(5,2);
    -- Semester 1
    SELECT (
        IFNULL((
            SELECT AVG(sms.score)
            FROM tbl_student_monthly_score sms
            JOIN classroom_subject_monthly_score csms ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
            WHERE sms.student_id = p_student_id AND csms.class_id = p_class_id AND FIND_IN_SET(csms.monthly_id, p_semester1_monthly_ids) AND sms.isDeleted = 0
        ), 0)
        +
        IFNULL((
            SELECT AVG(sss2.score)
            FROM tbl_student_semester_score sss2
            JOIN tbl_semester_exam_subjects ses2 ON sss2.semester_exam_subject_id = ses2.id
            WHERE sss2.student_id = p_student_id AND ses2.semester_id = 1 AND ses2.class_id = p_class_id AND sss2.isDeleted = 0
        ), 0)
    ) / 2 INTO semester1_avg;
    -- Semester 2
    SELECT (
        IFNULL((
            SELECT AVG(sms.score)
            FROM tbl_student_monthly_score sms
            JOIN classroom_subject_monthly_score csms ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
            WHERE sms.student_id = p_student_id AND csms.class_id = p_class_id AND FIND_IN_SET(csms.monthly_id, p_semester2_monthly_ids) AND sms.isDeleted = 0
        ), 0)
        +
        IFNULL((
            SELECT AVG(sss2.score)
            FROM tbl_student_semester_score sss2
            JOIN tbl_semester_exam_subjects ses2 ON sss2.semester_exam_subject_id = ses2.id
            WHERE sss2.student_id = p_student_id AND ses2.semester_id = 2 AND ses2.class_id = p_class_id AND sss2.isDeleted = 0
        ), 0)
    ) / 2 INTO semester2_avg;
    -- Yearly average
    SELECT
        p_student_id AS student_id,
        semester1_avg AS semester_1_average,
        semester2_avg AS semester_2_average,
        ROUND((semester1_avg + semester2_avg) / 2, 2) AS yearly_average;
END */$$
DELIMITER ;

/* Procedure structure for procedure `GetAvailableMonthsForSemester` */

/*!50003 DROP PROCEDURE IF EXISTS  `GetAvailableMonthsForSemester` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `GetAvailableMonthsForSemester`(
    IN p_class_id INT,
    IN p_semester_id INT,
    IN p_assign_subject_grade_id INT
)
BEGIN
    -- ជ្រើសខែដែលមានពិន្ទុសិស្សរួចហើយ
    SELECT DISTINCT 
        m.monthly_id,
        m.month_name,
        COUNT(DISTINCT sms.student_id) as student_count,
        COUNT(DISTINCT csms.assign_subject_grade_id) as subject_count
    FROM tbl_monthly m
    JOIN classroom_subject_monthly_score csms ON m.monthly_id = csms.monthly_id
    JOIN tbl_student_monthly_score sms ON csms.classroom_subject_monthly_score_id = sms.classroom_subject_monthly_score_id
    WHERE csms.class_id = p_class_id
    AND csms.assign_subject_grade_id = p_assign_subject_grade_id
    AND sms.isDeleted = 0
    AND csms.isDeleted = 0
    GROUP BY m.monthly_id, m.month_name
    HAVING student_count > 0 AND subject_count > 0
    ORDER BY m.monthly_id;
END */$$
DELIMITER ;

/* Procedure structure for procedure `GetStudentYearlyAveragesWithRanking` */

/*!50003 DROP PROCEDURE IF EXISTS  `GetStudentYearlyAveragesWithRanking` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `GetStudentYearlyAveragesWithRanking`(IN p_grade_id INT)
BEGIN
    SELECT 
        s.student_id,
        s.student_name,
        c.class_id,
        c.class_name,
        g.grade_id,
        g.grade_name,
        -- Semester 1 Monthly Average
        ROUND(IFNULL(AVG(CASE 
            WHEN FIND_IN_SET(csms.monthly_id, ses1.monthly_ids) THEN sms.score 
            ELSE NULL 
        END), 0), 2) AS semester1_monthly_avg,
        -- Semester 1 Exam Average
        ROUND(IFNULL(AVG(CASE 
            WHEN ses.semester_id = 1 THEN sss.score 
            ELSE NULL 
        END), 0), 2) AS semester1_exam_avg,
        -- Semester 2 Monthly Average
        ROUND(IFNULL(AVG(CASE 
            WHEN FIND_IN_SET(csms.monthly_id, ses2.monthly_ids) THEN sms.score 
            ELSE NULL 
        END), 0), 2) AS semester2_monthly_avg,
        -- Semester 2 Exam Average
        ROUND(IFNULL(AVG(CASE 
            WHEN ses.semester_id = 2 THEN sss.score 
            ELSE NULL 
        END), 0), 2) AS semester2_exam_avg,
        -- Final Semester 1 Average
        ROUND((
            IFNULL(AVG(CASE 
                WHEN FIND_IN_SET(csms.monthly_id, ses1.monthly_ids) THEN sms.score 
                ELSE NULL 
            END), 0) +
            IFNULL(AVG(CASE 
                WHEN ses.semester_id = 1 THEN sss.score 
                ELSE NULL 
            END), 0)
        ) / 2, 2) AS semester1_final_avg,
        -- Final Semester 2 Average
        ROUND((
            IFNULL(AVG(CASE 
                WHEN FIND_IN_SET(csms.monthly_id, ses2.monthly_ids) THEN sms.score 
                ELSE NULL 
            END), 0) +
            IFNULL(AVG(CASE 
                WHEN ses.semester_id = 2 THEN sss.score 
                ELSE NULL 
            END), 0)
        ) / 2, 2) AS semester2_final_avg,
        -- Yearly Average
        ROUND((
            (
                IFNULL(AVG(CASE 
                    WHEN FIND_IN_SET(csms.monthly_id, ses1.monthly_ids) THEN sms.score 
                    ELSE NULL 
                END), 0) +
                IFNULL(AVG(CASE 
                    WHEN ses.semester_id = 1 THEN sss.score 
                    ELSE NULL 
                END), 0)
            ) / 2 +
            (
                IFNULL(AVG(CASE 
                    WHEN FIND_IN_SET(csms.monthly_id, ses2.monthly_ids) THEN sms.score 
                    ELSE NULL 
                END), 0) +
                IFNULL(AVG(CASE 
                    WHEN ses.semester_id = 2 THEN sss.score 
                    ELSE NULL 
                END), 0)
            ) / 2
        ) / 2, 2) AS yearly_avg,
        -- Rankings
        DENSE_RANK() OVER (
            PARTITION BY c.class_id 
            ORDER BY ROUND((
                IFNULL(AVG(CASE 
                    WHEN FIND_IN_SET(csms.monthly_id, ses1.monthly_ids) THEN sms.score 
                    ELSE NULL 
                END), 0) +
                IFNULL(AVG(CASE 
                    WHEN ses.semester_id = 1 THEN sss.score 
                    ELSE NULL 
                END), 0)
            ) / 2, 2) DESC
        ) AS semester1_rank,
        DENSE_RANK() OVER (
            PARTITION BY c.class_id 
            ORDER BY ROUND((
                IFNULL(AVG(CASE 
                    WHEN FIND_IN_SET(csms.monthly_id, ses2.monthly_ids) THEN sms.score 
                    ELSE NULL 
                END), 0) +
                IFNULL(AVG(CASE 
                    WHEN ses.semester_id = 2 THEN sss.score 
                    ELSE NULL 
                END), 0)
            ) / 2, 2) DESC
        ) AS semester2_rank,
        DENSE_RANK() OVER (
            PARTITION BY c.class_id 
            ORDER BY ROUND((
                (
                    IFNULL(AVG(CASE 
                        WHEN FIND_IN_SET(csms.monthly_id, ses1.monthly_ids) THEN sms.score 
                        ELSE NULL 
                    END), 0) +
                    IFNULL(AVG(CASE 
                        WHEN ses.semester_id = 1 THEN sss.score 
                        ELSE NULL 
                    END), 0)
                ) / 2 +
                (
                    IFNULL(AVG(CASE 
                        WHEN FIND_IN_SET(csms.monthly_id, ses2.monthly_ids) THEN sms.score 
                        ELSE NULL 
                    END), 0) +
                    IFNULL(AVG(CASE 
                        WHEN ses.semester_id = 2 THEN sss.score 
                        ELSE NULL 
                    END), 0)
                ) / 2
            ) / 2, 2) DESC
        ) AS yearly_rank
    FROM 
        tbl_student_info s
        JOIN tbl_study st ON s.student_id = st.student_id
        JOIN tbl_classroom c ON st.class_id = c.class_id
        JOIN tbl_grade g ON c.grade_id = g.grade_id
        LEFT JOIN tbl_student_monthly_score sms ON s.student_id = sms.student_id
        LEFT JOIN classroom_subject_monthly_score csms ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
        LEFT JOIN tbl_student_semester_score sss ON s.student_id = sss.student_id
        LEFT JOIN tbl_semester_exam_subjects ses ON sss.semester_exam_subject_id = ses.id
        LEFT JOIN tbl_semester_exam_subjects ses1 ON ses1.class_id = c.class_id AND ses1.semester_id = 1
        LEFT JOIN tbl_semester_exam_subjects ses2 ON ses2.class_id = c.class_id AND ses2.semester_id = 2
    WHERE 
        g.grade_id = p_grade_id
        AND st.status = 'active'
        AND s.isDeleted = 0
        AND st.isDeleted = 0
        AND (sms.isDeleted = 0 OR sms.isDeleted IS NULL)
        AND (csms.isDeleted = 0 OR csms.isDeleted IS NULL)
        AND (sss.isDeleted = 0 OR sss.isDeleted IS NULL)
    GROUP BY 
        s.student_id, s.student_name, c.class_id, c.class_name, g.grade_id, g.grade_name;
END */$$
DELIMITER ;

/* Procedure structure for procedure `GetYearlyAverageByGrade` */

/*!50003 DROP PROCEDURE IF EXISTS  `GetYearlyAverageByGrade` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `GetYearlyAverageByGrade`(IN p_grade_id INT)
BEGIN
    SELECT 
        s.student_id,
        s.student_name,
        c.class_id,
        c.class_name,
        g.grade_id,
        g.grade_name,
        -- Semester 1 Monthly Average
        ROUND(IFNULL(AVG(CASE 
            WHEN FIND_IN_SET(csms.monthly_id, ses1.monthly_ids) THEN sms.score 
            ELSE NULL 
        END), 0), 2) AS semester1_monthly_avg,
        -- Semester 1 Exam Average
        ROUND(IFNULL(AVG(CASE 
            WHEN ses.semester_id = 1 THEN sss.score 
            ELSE NULL 
        END), 0), 2) AS semester1_exam_avg,
        -- Semester 2 Monthly Average
        ROUND(IFNULL(AVG(CASE 
            WHEN FIND_IN_SET(csms.monthly_id, ses2.monthly_ids) THEN sms.score 
            ELSE NULL 
        END), 0), 2) AS semester2_monthly_avg,
        -- Semester 2 Exam Average
        ROUND(IFNULL(AVG(CASE 
            WHEN ses.semester_id = 2 THEN sss.score 
            ELSE NULL 
        END), 0), 2) AS semester2_exam_avg,
        -- Final Semester 1 Average
        ROUND((
            IFNULL(AVG(CASE 
                WHEN FIND_IN_SET(csms.monthly_id, ses1.monthly_ids) THEN sms.score 
                ELSE NULL 
            END), 0) +
            IFNULL(AVG(CASE 
                WHEN ses.semester_id = 1 THEN sss.score 
                ELSE NULL 
            END), 0)
        ) / 2, 2) AS semester1_final_avg,
        -- Final Semester 2 Average
        ROUND((
            IFNULL(AVG(CASE 
                WHEN FIND_IN_SET(csms.monthly_id, ses2.monthly_ids) THEN sms.score 
                ELSE NULL 
            END), 0) +
            IFNULL(AVG(CASE 
                WHEN ses.semester_id = 2 THEN sss.score 
                ELSE NULL 
            END), 0)
        ) / 2, 2) AS semester2_final_avg,
        -- Yearly Average
        ROUND((
            (
                IFNULL(AVG(CASE 
                    WHEN FIND_IN_SET(csms.monthly_id, ses1.monthly_ids) THEN sms.score 
                    ELSE NULL 
                END), 0) +
                IFNULL(AVG(CASE 
                    WHEN ses.semester_id = 1 THEN sss.score 
                    ELSE NULL 
                END), 0)
            ) / 2 +
            (
                IFNULL(AVG(CASE 
                    WHEN FIND_IN_SET(csms.monthly_id, ses2.monthly_ids) THEN sms.score 
                    ELSE NULL 
                END), 0) +
                IFNULL(AVG(CASE 
                    WHEN ses.semester_id = 2 THEN sss.score 
                    ELSE NULL 
                END), 0)
            ) / 2
        ) / 2, 2) AS yearly_avg
    FROM 
        tbl_student_info s
        JOIN tbl_study st ON s.student_id = st.student_id
        JOIN tbl_classroom c ON st.class_id = c.class_id
        JOIN tbl_grade g ON c.grade_id = g.grade_id
        LEFT JOIN tbl_student_monthly_score sms ON s.student_id = sms.student_id
        LEFT JOIN classroom_subject_monthly_score csms ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
        LEFT JOIN tbl_student_semester_score sss ON s.student_id = sss.student_id
        LEFT JOIN tbl_semester_exam_subjects ses ON sss.semester_exam_subject_id = ses.id
        LEFT JOIN tbl_semester_exam_subjects ses1 ON ses1.class_id = c.class_id AND ses1.semester_id = 1
        LEFT JOIN tbl_semester_exam_subjects ses2 ON ses2.class_id = c.class_id AND ses2.semester_id = 2
    WHERE 
        g.grade_id = p_grade_id
        AND st.status = 'active'
        AND s.isDeleted = 0
        AND st.isDeleted = 0
        AND (sms.isDeleted = 0 OR sms.isDeleted IS NULL)
        AND (csms.isDeleted = 0 OR csms.isDeleted IS NULL)
        AND (sss.isDeleted = 0 OR sss.isDeleted IS NULL)
    GROUP BY 
        s.student_id, s.student_name, c.class_id, c.class_name, g.grade_id, g.grade_name
    ORDER BY 
        s.student_name;
END */$$
DELIMITER ;

/* Procedure structure for procedure `GetYearlyAverageForClass` */

/*!50003 DROP PROCEDURE IF EXISTS  `GetYearlyAverageForClass` */;

DELIMITER $$

/*!50003 CREATE DEFINER=`root`@`localhost` PROCEDURE `GetYearlyAverageForClass`(
    IN p_class_id INT
)
BEGIN
    SELECT 
        s.student_id,
        s.student_name,
        c.class_id,
        c.class_name,
        -- Semester 1 Monthly Average
        ROUND(IFNULL(AVG(CASE 
            WHEN FIND_IN_SET(csms.monthly_id, ses1.monthly_ids) THEN sms.score 
            ELSE NULL 
        END), 0), 2) AS semester1_monthly_avg,
        -- Semester 1 Exam Average
        ROUND(IFNULL(AVG(CASE 
            WHEN ses.semester_id = 1 THEN sss.score 
            ELSE NULL 
        END), 0), 2) AS semester1_exam_avg,
        -- Semester 2 Monthly Average
        ROUND(IFNULL(AVG(CASE 
            WHEN FIND_IN_SET(csms.monthly_id, ses2.monthly_ids) THEN sms.score 
            ELSE NULL 
        END), 0), 2) AS semester2_monthly_avg,
        -- Semester 2 Exam Average
        ROUND(IFNULL(AVG(CASE 
            WHEN ses.semester_id = 2 THEN sss.score 
            ELSE NULL 
        END), 0), 2) AS semester2_exam_avg,
        -- Final Semester 1 Average
        ROUND((
            IFNULL(AVG(CASE 
                WHEN FIND_IN_SET(csms.monthly_id, ses1.monthly_ids) THEN sms.score 
                ELSE NULL 
            END), 0) +
            IFNULL(AVG(CASE 
                WHEN ses.semester_id = 1 THEN sss.score 
                ELSE NULL 
            END), 0)
        ) / 2, 2) AS semester1_final_avg,
        -- Final Semester 2 Average
        ROUND((
            IFNULL(AVG(CASE 
                WHEN FIND_IN_SET(csms.monthly_id, ses2.monthly_ids) THEN sms.score 
                ELSE NULL 
            END), 0) +
            IFNULL(AVG(CASE 
                WHEN ses.semester_id = 2 THEN sss.score 
                ELSE NULL 
            END), 0)
        ) / 2, 2) AS semester2_final_avg,
        -- Yearly Average
        ROUND((
            (
                IFNULL(AVG(CASE 
                    WHEN FIND_IN_SET(csms.monthly_id, ses1.monthly_ids) THEN sms.score 
                    ELSE NULL 
                END), 0) +
                IFNULL(AVG(CASE 
                    WHEN ses.semester_id = 1 THEN sss.score 
                    ELSE NULL 
                END), 0)
            ) / 2 +
            (
                IFNULL(AVG(CASE 
                    WHEN FIND_IN_SET(csms.monthly_id, ses2.monthly_ids) THEN sms.score 
                    ELSE NULL 
                END), 0) +
                IFNULL(AVG(CASE 
                    WHEN ses.semester_id = 2 THEN sss.score 
                    ELSE NULL 
                END), 0)
            ) / 2
        ) / 2, 2) AS yearly_avg
    FROM 
        tbl_student_info s
        JOIN tbl_study st ON s.student_id = st.student_id
        JOIN tbl_classroom c ON st.class_id = c.class_id
        LEFT JOIN tbl_student_monthly_score sms ON s.student_id = sms.student_id
        LEFT JOIN classroom_subject_monthly_score csms ON sms.classroom_subject_monthly_score_id = csms.classroom_subject_monthly_score_id
        LEFT JOIN tbl_student_semester_score sss ON s.student_id = sss.student_id
        LEFT JOIN tbl_semester_exam_subjects ses ON sss.semester_exam_subject_id = ses.id
        LEFT JOIN tbl_semester_exam_subjects ses1 ON ses1.class_id = c.class_id AND ses1.semester_id = 1
        LEFT JOIN tbl_semester_exam_subjects ses2 ON ses2.class_id = c.class_id AND ses2.semester_id = 2
    WHERE 
        c.class_id = p_class_id
        AND st.status = 'active'
        AND s.isDeleted = 0
        AND st.isDeleted = 0
        AND (sms.isDeleted = 0 OR sms.isDeleted IS NULL)
        AND (csms.isDeleted = 0 OR csms.isDeleted IS NULL)
        AND (sss.isDeleted = 0 OR sss.isDeleted IS NULL)
    GROUP BY 
        s.student_id, s.student_name, c.class_id, c.class_name;
END */$$
DELIMITER ;

/*Table structure for table `view_final_semester_averages` */

DROP TABLE IF EXISTS `view_final_semester_averages`;

/*!50001 DROP VIEW IF EXISTS `view_final_semester_averages` */;
/*!50001 DROP TABLE IF EXISTS `view_final_semester_averages` */;

/*!50001 CREATE TABLE  `view_final_semester_averages`(
 `student_id` int(10) unsigned ,
 `student_name` varchar(255) ,
 `gender` varchar(255) ,
 `semester_id` int(10) unsigned ,
 `semester_name` varchar(255) ,
 `class_id` int(10) unsigned ,
 `class_name` varchar(255) ,
 `grade_name` varchar(255) ,
 `subject_code` int(10) unsigned ,
 `subject_name` varchar(255) ,
 `subject_score` float ,
 `monthly_average` double ,
 `semester_exam_average` double ,
 `final_semester_average` double(19,2) ,
 `yearly_average` double(19,2) 
)*/;

/*Table structure for table `view_student_monthly_rankings` */

DROP TABLE IF EXISTS `view_student_monthly_rankings`;

/*!50001 DROP VIEW IF EXISTS `view_student_monthly_rankings` */;
/*!50001 DROP TABLE IF EXISTS `view_student_monthly_rankings` */;

/*!50001 CREATE TABLE  `view_student_monthly_rankings`(
 `student_id` int(10) unsigned ,
 `student_name` varchar(255) ,
 `class_id` int(10) unsigned ,
 `class_name` varchar(255) ,
 `monthly_id` int(10) unsigned ,
 `month_name` varchar(255) ,
 `subjects_count` bigint(21) ,
 `total_score` double ,
 `average_score` double ,
 `rank_in_class` bigint(21) ,
 `class_size` bigint(21) 
)*/;

/*Table structure for table `view_student_monthly_score_report` */

DROP TABLE IF EXISTS `view_student_monthly_score_report`;

/*!50001 DROP VIEW IF EXISTS `view_student_monthly_score_report` */;
/*!50001 DROP TABLE IF EXISTS `view_student_monthly_score_report` */;

/*!50001 CREATE TABLE  `view_student_monthly_score_report`(
 `student_id` int(10) unsigned ,
 `student_name` varchar(255) ,
 `gender` varchar(255) ,
 `class_id` int(10) unsigned ,
 `class_name` varchar(255) ,
 `monthly_id` int(10) unsigned ,
 `month_name` varchar(255) ,
 `subject_code` int(10) unsigned ,
 `subject_name` varchar(255) ,
 `score` float ,
 `isDeleted` int(2) 
)*/;

/*Table structure for table `view_student_monthly_score_summary` */

DROP TABLE IF EXISTS `view_student_monthly_score_summary`;

/*!50001 DROP VIEW IF EXISTS `view_student_monthly_score_summary` */;
/*!50001 DROP TABLE IF EXISTS `view_student_monthly_score_summary` */;

/*!50001 CREATE TABLE  `view_student_monthly_score_summary`(
 `student_id` int(10) unsigned ,
 `student_name` varchar(255) ,
 `class_id` int(10) unsigned ,
 `class_name` varchar(255) ,
 `monthly_id` int(10) unsigned ,
 `month_name` varchar(255) ,
 `subjects_count` bigint(21) ,
 `total_score` double ,
 `avg_score` double ,
 `rank_in_class` bigint(21) 
)*/;

/*Table structure for table `view_student_monthly_summary` */

DROP TABLE IF EXISTS `view_student_monthly_summary`;

/*!50001 DROP VIEW IF EXISTS `view_student_monthly_summary` */;
/*!50001 DROP TABLE IF EXISTS `view_student_monthly_summary` */;

/*!50001 CREATE TABLE  `view_student_monthly_summary`(
 `student_id` int(10) unsigned ,
 `student_name` varchar(255) ,
 `class_id` int(10) unsigned ,
 `class_name` varchar(255) ,
 `monthly_id` int(10) unsigned ,
 `month_name` varchar(255) ,
 `subjects_count` bigint(21) ,
 `total_score` double ,
 `average_score` double 
)*/;

/*Table structure for table `view_student_semester_report` */

DROP TABLE IF EXISTS `view_student_semester_report`;

/*!50001 DROP VIEW IF EXISTS `view_student_semester_report` */;
/*!50001 DROP TABLE IF EXISTS `view_student_semester_report` */;

/*!50001 CREATE TABLE  `view_student_semester_report`(
 `student_id` int(10) unsigned ,
 `student_name` varchar(255) ,
 `gender` varchar(255) ,
 `class_id` int(10) unsigned ,
 `class_name` varchar(255) ,
 `grade_id` int(11) ,
 `grade_name` varchar(255) ,
 `semester_id` int(10) unsigned ,
 `semester_name` varchar(255) ,
 `subject_code` int(10) unsigned ,
 `subject_name` varchar(255) ,
 `monthly_average` double ,
 `semester_exam_average` double ,
 `final_semester_average` double 
)*/;

/*Table structure for table `view_student_semester_score_report` */

DROP TABLE IF EXISTS `view_student_semester_score_report`;

/*!50001 DROP VIEW IF EXISTS `view_student_semester_score_report` */;
/*!50001 DROP TABLE IF EXISTS `view_student_semester_score_report` */;

/*!50001 CREATE TABLE  `view_student_semester_score_report`(
 `student_id` int(10) unsigned ,
 `student_name` varchar(255) ,
 `gender` varchar(255) ,
 `class_id` int(10) unsigned ,
 `class_name` varchar(255) ,
 `semester_id` int(10) unsigned ,
 `semester_name` varchar(255) ,
 `subject_code` int(10) unsigned ,
 `subject_name` varchar(255) ,
 `score` float ,
 `isDeleted` int(2) 
)*/;

/*Table structure for table `vstudentmonthlyscorereport` */

DROP TABLE IF EXISTS `vstudentmonthlyscorereport`;

/*!50001 DROP VIEW IF EXISTS `vstudentmonthlyscorereport` */;
/*!50001 DROP TABLE IF EXISTS `vstudentmonthlyscorereport` */;

/*!50001 CREATE TABLE  `vstudentmonthlyscorereport`(
 `student_id` int(10) unsigned ,
 `student_name` varchar(255) ,
 `class_id` int(10) unsigned ,
 `class_name` varchar(255) ,
 `monthly_id` int(10) unsigned ,
 `month_name` varchar(255) ,
 `subject_scores` mediumtext 
)*/;

/*Table structure for table `vstudentmonthlyscorereportv2` */

DROP TABLE IF EXISTS `vstudentmonthlyscorereportv2`;

/*!50001 DROP VIEW IF EXISTS `vstudentmonthlyscorereportv2` */;
/*!50001 DROP TABLE IF EXISTS `vstudentmonthlyscorereportv2` */;

/*!50001 CREATE TABLE  `vstudentmonthlyscorereportv2`(
 `student_id` int(10) unsigned ,
 `student_name` varchar(255) ,
 `class_id` int(10) unsigned ,
 `class_name` varchar(255) ,
 `monthly_id` int(10) unsigned ,
 `month_name` varchar(255) ,
 `subject_code` int(10) unsigned ,
 `subject_name` varchar(255) ,
 `score` float 
)*/;

/*Table structure for table `vw_student_first_semester_final_avg` */

DROP TABLE IF EXISTS `vw_student_first_semester_final_avg`;

/*!50001 DROP VIEW IF EXISTS `vw_student_first_semester_final_avg` */;
/*!50001 DROP TABLE IF EXISTS `vw_student_first_semester_final_avg` */;

/*!50001 CREATE TABLE  `vw_student_first_semester_final_avg`(
 `student_id` int(10) unsigned ,
 `student_name` varchar(255) ,
 `class_id` int(10) unsigned ,
 `class_name` varchar(255) ,
 `grade_id` int(11) ,
 `grade_name` varchar(255) ,
 `monthly_average` double ,
 `semester_exam_average` double ,
 `final_semester_average` double 
)*/;

/*Table structure for table `vw_student_semester_scores_with_averages` */

DROP TABLE IF EXISTS `vw_student_semester_scores_with_averages`;

/*!50001 DROP VIEW IF EXISTS `vw_student_semester_scores_with_averages` */;
/*!50001 DROP TABLE IF EXISTS `vw_student_semester_scores_with_averages` */;

/*!50001 CREATE TABLE  `vw_student_semester_scores_with_averages`(
 `student_id` int(10) unsigned ,
 `student_name` varchar(255) ,
 `class_id` int(10) unsigned ,
 `class_name` varchar(255) ,
 `grade_name` varchar(255) ,
 `semester_id` int(10) unsigned ,
 `semester_name` varchar(255) ,
 `subject_name` varchar(255) ,
 `subject_code` int(10) unsigned ,
 `assign_subject_grade_id` int(10) unsigned ,
 `student_semester_score_id` decimal(10,0) ,
 `score` float ,
 `create_date` timestamp ,
 `semester1_avg` double ,
 `semester2_avg` double ,
 `yearly_avg` double(19,2) 
)*/;

/*View structure for view view_final_semester_averages */

/*!50001 DROP TABLE IF EXISTS `view_final_semester_averages` */;
/*!50001 DROP VIEW IF EXISTS `view_final_semester_averages` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `view_final_semester_averages` AS select `si`.`student_id` AS `student_id`,`si`.`student_name` AS `student_name`,`si`.`gender` AS `gender`,`sem`.`semester_id` AS `semester_id`,`sem`.`semester_name` AS `semester_name`,`c`.`class_id` AS `class_id`,`c`.`class_name` AS `class_name`,`g`.`grade_name` AS `grade_name`,`sub`.`subject_code` AS `subject_code`,`sub`.`subject_name` AS `subject_name`,`sss`.`score` AS `subject_score`,(select avg(`sms`.`score`) from ((`tbl_student_monthly_score` `sms` join `classroom_subject_monthly_score` `csms` on(`sms`.`classroom_subject_monthly_score_id` = `csms`.`classroom_subject_monthly_score_id`)) join `tbl_semester_exam_subjects` `ses2` on(`csms`.`class_id` = `ses2`.`class_id` and `ses2`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) where `sms`.`student_id` = `si`.`student_id` and find_in_set(`csms`.`monthly_id`,`ses2`.`monthly_ids`) and `ses2`.`semester_id` = `sem`.`semester_id` and `sms`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0) AS `monthly_average`,(select avg(`sss2`.`score`) from (`tbl_student_semester_score` `sss2` join `tbl_semester_exam_subjects` `ses2` on(`sss2`.`semester_exam_subject_id` = `ses2`.`id`)) where `sss2`.`student_id` = `si`.`student_id` and `ses2`.`semester_id` = `sem`.`semester_id` and `ses2`.`class_id` = `c`.`class_id` and `sss2`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0) AS `semester_exam_average`,round((ifnull((select avg(`sms`.`score`) from ((`tbl_student_monthly_score` `sms` join `classroom_subject_monthly_score` `csms` on(`sms`.`classroom_subject_monthly_score_id` = `csms`.`classroom_subject_monthly_score_id`)) join `tbl_semester_exam_subjects` `ses2` on(`csms`.`class_id` = `ses2`.`class_id` and `ses2`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) where `sms`.`student_id` = `si`.`student_id` and find_in_set(`csms`.`monthly_id`,`ses2`.`monthly_ids`) and `ses2`.`semester_id` = `sem`.`semester_id` and `sms`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0),0) + ifnull((select avg(`sss2`.`score`) from (`tbl_student_semester_score` `sss2` join `tbl_semester_exam_subjects` `ses2` on(`sss2`.`semester_exam_subject_id` = `ses2`.`id`)) where `sss2`.`student_id` = `si`.`student_id` and `ses2`.`semester_id` = `sem`.`semester_id` and `ses2`.`class_id` = `c`.`class_id` and `sss2`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0),0)) / 2,2) AS `final_semester_average`,round(((ifnull((select avg(`sms`.`score`) from ((`tbl_student_monthly_score` `sms` join `classroom_subject_monthly_score` `csms` on(`sms`.`classroom_subject_monthly_score_id` = `csms`.`classroom_subject_monthly_score_id`)) join `tbl_semester_exam_subjects` `ses2` on(`csms`.`class_id` = `ses2`.`class_id` and `ses2`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) where `sms`.`student_id` = `si`.`student_id` and find_in_set(`csms`.`monthly_id`,`ses2`.`monthly_ids`) and `ses2`.`semester_id` = 1 and `sms`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0),0) + ifnull((select avg(`sss2`.`score`) from (`tbl_student_semester_score` `sss2` join `tbl_semester_exam_subjects` `ses2` on(`sss2`.`semester_exam_subject_id` = `ses2`.`id`)) where `sss2`.`student_id` = `si`.`student_id` and `ses2`.`semester_id` = 1 and `ses2`.`class_id` = `c`.`class_id` and `sss2`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0),0)) / 2 + (ifnull((select avg(`sms`.`score`) from ((`tbl_student_monthly_score` `sms` join `classroom_subject_monthly_score` `csms` on(`sms`.`classroom_subject_monthly_score_id` = `csms`.`classroom_subject_monthly_score_id`)) join `tbl_semester_exam_subjects` `ses2` on(`csms`.`class_id` = `ses2`.`class_id` and `ses2`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) where `sms`.`student_id` = `si`.`student_id` and find_in_set(`csms`.`monthly_id`,`ses2`.`monthly_ids`) and `ses2`.`semester_id` = 2 and `sms`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0),0) + ifnull((select avg(`sss2`.`score`) from (`tbl_student_semester_score` `sss2` join `tbl_semester_exam_subjects` `ses2` on(`sss2`.`semester_exam_subject_id` = `ses2`.`id`)) where `sss2`.`student_id` = `si`.`student_id` and `ses2`.`semester_id` = 2 and `ses2`.`class_id` = `c`.`class_id` and `sss2`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0),0)) / 2) / 2,2) AS `yearly_average` from (((((((`tbl_student_info` `si` join `tbl_student_semester_score` `sss` on(`si`.`student_id` = `sss`.`student_id`)) join `tbl_semester_exam_subjects` `ses` on(`sss`.`semester_exam_subject_id` = `ses`.`id`)) join `tbl_classroom` `c` on(`ses`.`class_id` = `c`.`class_id`)) join `tbl_assign_subject_grade` `asg` on(`ses`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) join `tbl_subject` `sub` on(`asg`.`subject_code` = `sub`.`subject_code`)) join `tbl_grade` `g` on(`asg`.`grade_id` = `g`.`grade_id`)) join `tbl_semester` `sem` on(`ses`.`semester_id` = `sem`.`semester_id`)) where `si`.`isDeleted` = 0 and `c`.`isDeleted` = 0 and `sem`.`isDeleted` = 0 and `asg`.`isDeleted` = 0 and `sss`.`isDeleted` = 0 group by `si`.`student_id`,`sem`.`semester_id`,`c`.`class_id`,`sub`.`subject_code` */;

/*View structure for view view_student_monthly_rankings */

/*!50001 DROP TABLE IF EXISTS `view_student_monthly_rankings` */;
/*!50001 DROP VIEW IF EXISTS `view_student_monthly_rankings` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `view_student_monthly_rankings` AS select `s`.`student_id` AS `student_id`,`s`.`student_name` AS `student_name`,`s`.`class_id` AS `class_id`,`s`.`class_name` AS `class_name`,`s`.`monthly_id` AS `monthly_id`,`s`.`month_name` AS `month_name`,`s`.`subjects_count` AS `subjects_count`,`s`.`total_score` AS `total_score`,`s`.`average_score` AS `average_score`,rank() over ( partition by `s`.`class_id`,`s`.`monthly_id` order by `s`.`average_score` desc) AS `rank_in_class`,count(0) over ( partition by `s`.`class_id`,`s`.`monthly_id`) AS `class_size` from `view_student_monthly_summary` `s` */;

/*View structure for view view_student_monthly_score_report */

/*!50001 DROP TABLE IF EXISTS `view_student_monthly_score_report` */;
/*!50001 DROP VIEW IF EXISTS `view_student_monthly_score_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `view_student_monthly_score_report` AS select `s`.`student_id` AS `student_id`,`s`.`student_name` AS `student_name`,`s`.`gender` AS `gender`,`c`.`class_id` AS `class_id`,`c`.`class_name` AS `class_name`,`m`.`monthly_id` AS `monthly_id`,`m`.`month_name` AS `month_name`,`sub`.`subject_code` AS `subject_code`,`sub`.`subject_name` AS `subject_name`,`sms`.`score` AS `score`,`sms`.`isDeleted` AS `isDeleted` from (((((((`tbl_student_info` `s` join `tbl_study` `st` on(`s`.`student_id` = `st`.`student_id` and `st`.`status` = 'active' and `st`.`isDeleted` = 0)) join `tbl_classroom` `c` on(`st`.`class_id` = `c`.`class_id`)) join `classroom_subject_monthly_score` `csms` on(`c`.`class_id` = `csms`.`class_id`)) join `tbl_assign_subject_grade` `asg` on(`csms`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) join `tbl_subject` `sub` on(`asg`.`subject_code` = `sub`.`subject_code`)) join `tbl_monthly` `m` on(`csms`.`monthly_id` = `m`.`monthly_id`)) left join `tbl_student_monthly_score` `sms` on(`s`.`student_id` = `sms`.`student_id` and `sms`.`classroom_subject_monthly_score_id` = `csms`.`classroom_subject_monthly_score_id` and `sms`.`isDeleted` = 0)) where `s`.`isDeleted` = 0 and `csms`.`isDeleted` = 0 */;

/*View structure for view view_student_monthly_score_summary */

/*!50001 DROP TABLE IF EXISTS `view_student_monthly_score_summary` */;
/*!50001 DROP VIEW IF EXISTS `view_student_monthly_score_summary` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `view_student_monthly_score_summary` AS select `sms`.`student_id` AS `student_id`,`si`.`student_name` AS `student_name`,`c`.`class_id` AS `class_id`,`c`.`class_name` AS `class_name`,`m`.`monthly_id` AS `monthly_id`,`m`.`month_name` AS `month_name`,count(distinct `asg`.`assign_subject_grade_id`) AS `subjects_count`,sum(`sms`.`score`) AS `total_score`,avg(`sms`.`score`) AS `avg_score`,rank() over ( partition by `c`.`class_id`,`m`.`monthly_id` order by avg(`sms`.`score`) desc) AS `rank_in_class` from (((((`tbl_student_monthly_score` `sms` join `tbl_student_info` `si` on(`sms`.`student_id` = `si`.`student_id`)) join `classroom_subject_monthly_score` `csms` on(`sms`.`classroom_subject_monthly_score_id` = `csms`.`classroom_subject_monthly_score_id`)) join `tbl_classroom` `c` on(`csms`.`class_id` = `c`.`class_id`)) join `tbl_monthly` `m` on(`csms`.`monthly_id` = `m`.`monthly_id`)) join `tbl_assign_subject_grade` `asg` on(`csms`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) where `sms`.`isDeleted` = 0 group by `sms`.`student_id`,`si`.`student_name`,`c`.`class_id`,`c`.`class_name`,`m`.`monthly_id`,`m`.`month_name` */;

/*View structure for view view_student_monthly_summary */

/*!50001 DROP TABLE IF EXISTS `view_student_monthly_summary` */;
/*!50001 DROP VIEW IF EXISTS `view_student_monthly_summary` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `view_student_monthly_summary` AS select `sms`.`student_id` AS `student_id`,`si`.`student_name` AS `student_name`,`c`.`class_id` AS `class_id`,`c`.`class_name` AS `class_name`,`csms`.`monthly_id` AS `monthly_id`,`m`.`month_name` AS `month_name`,count(distinct `asg`.`assign_subject_grade_id`) AS `subjects_count`,sum(`sms`.`score`) AS `total_score`,avg(`sms`.`score`) AS `average_score` from (((((`tbl_student_monthly_score` `sms` join `tbl_student_info` `si` on(`sms`.`student_id` = `si`.`student_id`)) join `classroom_subject_monthly_score` `csms` on(`sms`.`classroom_subject_monthly_score_id` = `csms`.`classroom_subject_monthly_score_id`)) join `tbl_classroom` `c` on(`csms`.`class_id` = `c`.`class_id`)) join `tbl_monthly` `m` on(`csms`.`monthly_id` = `m`.`monthly_id`)) join `tbl_assign_subject_grade` `asg` on(`csms`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) where `sms`.`isDeleted` = 0 group by `sms`.`student_id`,`si`.`student_name`,`c`.`class_id`,`c`.`class_name`,`csms`.`monthly_id`,`m`.`month_name` */;

/*View structure for view view_student_semester_report */

/*!50001 DROP TABLE IF EXISTS `view_student_semester_report` */;
/*!50001 DROP VIEW IF EXISTS `view_student_semester_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `view_student_semester_report` AS select `si`.`student_id` AS `student_id`,`si`.`student_name` AS `student_name`,`si`.`gender` AS `gender`,`c`.`class_id` AS `class_id`,`c`.`class_name` AS `class_name`,`g`.`grade_id` AS `grade_id`,`g`.`grade_name` AS `grade_name`,`sem`.`semester_id` AS `semester_id`,`sem`.`semester_name` AS `semester_name`,`sub`.`subject_code` AS `subject_code`,`sub`.`subject_name` AS `subject_name`,(select avg(`sms`.`score`) from ((`tbl_student_monthly_score` `sms` join `classroom_subject_monthly_score` `csms` on(`sms`.`classroom_subject_monthly_score_id` = `csms`.`classroom_subject_monthly_score_id`)) join `tbl_semester_exam_subjects` `ses2` on(`csms`.`class_id` = `ses2`.`class_id` and `ses2`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) where `sms`.`student_id` = `si`.`student_id` and find_in_set(`csms`.`monthly_id`,`ses2`.`monthly_ids`) and `ses2`.`semester_id` = `sem`.`semester_id` and `sms`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0) AS `monthly_average`,(select avg(`sss2`.`score`) from (`tbl_student_semester_score` `sss2` join `tbl_semester_exam_subjects` `ses2` on(`sss2`.`semester_exam_subject_id` = `ses2`.`id`)) where `sss2`.`student_id` = `si`.`student_id` and `ses2`.`semester_id` = `sem`.`semester_id` and `ses2`.`class_id` = `c`.`class_id` and `sss2`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0) AS `semester_exam_average`,(ifnull((select avg(`sms`.`score`) from ((`tbl_student_monthly_score` `sms` join `classroom_subject_monthly_score` `csms` on(`sms`.`classroom_subject_monthly_score_id` = `csms`.`classroom_subject_monthly_score_id`)) join `tbl_semester_exam_subjects` `ses2` on(`csms`.`class_id` = `ses2`.`class_id` and `ses2`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) where `sms`.`student_id` = `si`.`student_id` and find_in_set(`csms`.`monthly_id`,`ses2`.`monthly_ids`) and `ses2`.`semester_id` = `sem`.`semester_id` and `sms`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0),0) + ifnull((select avg(`sss2`.`score`) from (`tbl_student_semester_score` `sss2` join `tbl_semester_exam_subjects` `ses2` on(`sss2`.`semester_exam_subject_id` = `ses2`.`id`)) where `sss2`.`student_id` = `si`.`student_id` and `ses2`.`semester_id` = `sem`.`semester_id` and `ses2`.`class_id` = `c`.`class_id` and `sss2`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0),0)) / 2 AS `final_semester_average` from (((((((`tbl_student_semester_score` `sss` join `tbl_student_info` `si` on(`sss`.`student_id` = `si`.`student_id`)) join `tbl_semester_exam_subjects` `ses` on(`sss`.`semester_exam_subject_id` = `ses`.`id`)) join `tbl_classroom` `c` on(`ses`.`class_id` = `c`.`class_id`)) join `tbl_assign_subject_grade` `asg` on(`ses`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) join `tbl_subject` `sub` on(`asg`.`subject_code` = `sub`.`subject_code`)) join `tbl_grade` `g` on(`asg`.`grade_id` = `g`.`grade_id`)) join `tbl_semester` `sem` on(`ses`.`semester_id` = `sem`.`semester_id`)) where `sss`.`isDeleted` = 0 and `si`.`isDeleted` = 0 and `c`.`isDeleted` = 0 and `sem`.`isDeleted` = 0 and `asg`.`isDeleted` = 0 group by `si`.`student_id`,`c`.`class_id`,`sem`.`semester_id`,`sub`.`subject_code` */;

/*View structure for view view_student_semester_score_report */

/*!50001 DROP TABLE IF EXISTS `view_student_semester_score_report` */;
/*!50001 DROP VIEW IF EXISTS `view_student_semester_score_report` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `view_student_semester_score_report` AS select `s`.`student_id` AS `student_id`,`s`.`student_name` AS `student_name`,`s`.`gender` AS `gender`,`c`.`class_id` AS `class_id`,`c`.`class_name` AS `class_name`,`se`.`semester_id` AS `semester_id`,`se`.`semester_name` AS `semester_name`,`sub`.`subject_code` AS `subject_code`,`sub`.`subject_name` AS `subject_name`,`sss`.`score` AS `score`,`sss`.`isDeleted` AS `isDeleted` from (((((((`tbl_student_info` `s` join `tbl_study` `st` on(`s`.`student_id` = `st`.`student_id` and `st`.`status` = 'active' and `st`.`isDeleted` = 0)) join `tbl_classroom` `c` on(`st`.`class_id` = `c`.`class_id`)) join `tbl_semester_exam_subjects` `ses` on(`c`.`class_id` = `ses`.`class_id`)) join `tbl_assign_subject_grade` `asg` on(`ses`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) join `tbl_subject` `sub` on(`asg`.`subject_code` = `sub`.`subject_code`)) join `tbl_semester` `se` on(`ses`.`semester_id` = `se`.`semester_id`)) left join `tbl_student_semester_score` `sss` on(`s`.`student_id` = `sss`.`student_id` and `sss`.`semester_exam_subject_id` = `ses`.`id` and `sss`.`isDeleted` = 0)) where `s`.`isDeleted` = 0 and `ses`.`isDeleted` = 0 */;

/*View structure for view vstudentmonthlyscorereport */

/*!50001 DROP TABLE IF EXISTS `vstudentmonthlyscorereport` */;
/*!50001 DROP VIEW IF EXISTS `vstudentmonthlyscorereport` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vstudentmonthlyscorereport` AS select `si`.`student_id` AS `student_id`,`si`.`student_name` AS `student_name`,`c`.`class_id` AS `class_id`,`c`.`class_name` AS `class_name`,`m`.`monthly_id` AS `monthly_id`,`m`.`month_name` AS `month_name`,group_concat(concat(`sub`.`subject_name`,': ',`sms`.`score`) order by `sub`.`subject_name` ASC separator ', ') AS `subject_scores` from (((((((`tbl_student_info` `si` join `tbl_study` `st` on(`si`.`student_id` = `st`.`student_id` and `st`.`status` = 'active' and `st`.`isDeleted` = 0)) join `tbl_classroom` `c` on(`st`.`class_id` = `c`.`class_id`)) join `tbl_student_monthly_score` `sms` on(`si`.`student_id` = `sms`.`student_id`)) join `classroom_subject_monthly_score` `csms` on(`sms`.`classroom_subject_monthly_score_id` = `csms`.`classroom_subject_monthly_score_id`)) join `tbl_monthly` `m` on(`csms`.`monthly_id` = `m`.`monthly_id`)) join `tbl_assign_subject_grade` `asg` on(`csms`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) join `tbl_subject` `sub` on(`asg`.`subject_code` = `sub`.`subject_code`)) where `si`.`isDeleted` = 0 and `sms`.`isDeleted` = 0 group by `si`.`student_id`,`si`.`student_name`,`c`.`class_id`,`c`.`class_name`,`m`.`monthly_id`,`m`.`month_name` order by `si`.`student_name`,`m`.`monthly_id` */;

/*View structure for view vstudentmonthlyscorereportv2 */

/*!50001 DROP TABLE IF EXISTS `vstudentmonthlyscorereportv2` */;
/*!50001 DROP VIEW IF EXISTS `vstudentmonthlyscorereportv2` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vstudentmonthlyscorereportv2` AS select `si`.`student_id` AS `student_id`,`si`.`student_name` AS `student_name`,`c`.`class_id` AS `class_id`,`c`.`class_name` AS `class_name`,`m`.`monthly_id` AS `monthly_id`,`m`.`month_name` AS `month_name`,`sub`.`subject_code` AS `subject_code`,`sub`.`subject_name` AS `subject_name`,coalesce(`sms`.`score`,NULL) AS `score` from (((((((`tbl_student_info` `si` join `tbl_study` `st` on(`si`.`student_id` = `st`.`student_id` and `st`.`status` = 'active' and `st`.`isDeleted` = 0)) join `tbl_classroom` `c` on(`st`.`class_id` = `c`.`class_id`)) join `classroom_subject_monthly_score` `csms` on(`c`.`class_id` = `csms`.`class_id`)) join `tbl_monthly` `m` on(`csms`.`monthly_id` = `m`.`monthly_id`)) join `tbl_assign_subject_grade` `asg` on(`csms`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) join `tbl_subject` `sub` on(`asg`.`subject_code` = `sub`.`subject_code`)) left join `tbl_student_monthly_score` `sms` on(`si`.`student_id` = `sms`.`student_id` and `sms`.`classroom_subject_monthly_score_id` = `csms`.`classroom_subject_monthly_score_id`)) where `si`.`isDeleted` = 0 and `csms`.`isDeleted` = 0 order by `si`.`student_name`,`m`.`monthly_id`,`sub`.`subject_name` */;

/*View structure for view vw_student_first_semester_final_avg */

/*!50001 DROP TABLE IF EXISTS `vw_student_first_semester_final_avg` */;
/*!50001 DROP VIEW IF EXISTS `vw_student_first_semester_final_avg` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vw_student_first_semester_final_avg` AS select `view_student_semester_report`.`student_id` AS `student_id`,`view_student_semester_report`.`student_name` AS `student_name`,`view_student_semester_report`.`class_id` AS `class_id`,`view_student_semester_report`.`class_name` AS `class_name`,`view_student_semester_report`.`grade_id` AS `grade_id`,`view_student_semester_report`.`grade_name` AS `grade_name`,`view_student_semester_report`.`monthly_average` AS `monthly_average`,`view_student_semester_report`.`semester_exam_average` AS `semester_exam_average`,`view_student_semester_report`.`final_semester_average` AS `final_semester_average` from `view_student_semester_report` where `view_student_semester_report`.`semester_id` = 1 */;

/*View structure for view vw_student_semester_scores_with_averages */

/*!50001 DROP TABLE IF EXISTS `vw_student_semester_scores_with_averages` */;
/*!50001 DROP VIEW IF EXISTS `vw_student_semester_scores_with_averages` */;

/*!50001 CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vw_student_semester_scores_with_averages` AS select `s`.`student_id` AS `student_id`,`s`.`student_name` AS `student_name`,`c`.`class_id` AS `class_id`,`c`.`class_name` AS `class_name`,`g`.`grade_name` AS `grade_name`,`sem`.`semester_id` AS `semester_id`,`sem`.`semester_name` AS `semester_name`,`sub`.`subject_name` AS `subject_name`,`sub`.`subject_code` AS `subject_code`,`asg`.`assign_subject_grade_id` AS `assign_subject_grade_id`,coalesce(`sss`.`student_semester_score_id`,NULL) AS `student_semester_score_id`,coalesce(`sss`.`score`,NULL) AS `score`,`sss`.`create_date` AS `create_date`,(select avg(`sss1`.`score`) from (`tbl_student_semester_score` `sss1` join `tbl_semester_exam_subjects` `ses1` on(`sss1`.`semester_exam_subject_id` = `ses1`.`id`)) where `sss1`.`student_id` = `s`.`student_id` and `ses1`.`semester_id` = 1 and `ses1`.`class_id` = `c`.`class_id` and `sss1`.`isDeleted` = 0 and `ses1`.`isDeleted` = 0) AS `semester1_avg`,(select avg(`sss2`.`score`) from (`tbl_student_semester_score` `sss2` join `tbl_semester_exam_subjects` `ses2` on(`sss2`.`semester_exam_subject_id` = `ses2`.`id`)) where `sss2`.`student_id` = `s`.`student_id` and `ses2`.`semester_id` = 2 and `ses2`.`class_id` = `c`.`class_id` and `sss2`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0) AS `semester2_avg`,(select round((ifnull((select avg(`sss1`.`score`) from (`tbl_student_semester_score` `sss1` join `tbl_semester_exam_subjects` `ses1` on(`sss1`.`semester_exam_subject_id` = `ses1`.`id`)) where `sss1`.`student_id` = `s`.`student_id` and `ses1`.`semester_id` = 1 and `ses1`.`class_id` = `c`.`class_id` and `sss1`.`isDeleted` = 0 and `ses1`.`isDeleted` = 0),0) + ifnull((select avg(`sss2`.`score`) from (`tbl_student_semester_score` `sss2` join `tbl_semester_exam_subjects` `ses2` on(`sss2`.`semester_exam_subject_id` = `ses2`.`id`)) where `sss2`.`student_id` = `s`.`student_id` and `ses2`.`semester_id` = 2 and `ses2`.`class_id` = `c`.`class_id` and `sss2`.`isDeleted` = 0 and `ses2`.`isDeleted` = 0),0)) / 2,2)) AS `yearly_avg` from ((((((((`tbl_student_info` `s` join `tbl_study` `st` on(`s`.`student_id` = `st`.`student_id` and `st`.`status` = 'active' and `st`.`isDeleted` = 0)) join `tbl_classroom` `c` on(`st`.`class_id` = `c`.`class_id`)) join `tbl_grade` `g` on(`c`.`grade_id` = `g`.`grade_id`)) join `tbl_semester_exam_subjects` `ses` on(`c`.`class_id` = `ses`.`class_id` and `ses`.`isDeleted` = 0)) join `tbl_assign_subject_grade` `asg` on(`ses`.`assign_subject_grade_id` = `asg`.`assign_subject_grade_id`)) join `tbl_subject` `sub` on(`asg`.`subject_code` = `sub`.`subject_code`)) join `tbl_semester` `sem` on(`ses`.`semester_id` = `sem`.`semester_id`)) left join `tbl_student_semester_score` `sss` on(`s`.`student_id` = `sss`.`student_id` and `sss`.`semester_exam_subject_id` = `ses`.`id` and `sss`.`isDeleted` = 0)) where `s`.`isDeleted` = 0 order by `s`.`student_name`,`sub`.`subject_name` */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
